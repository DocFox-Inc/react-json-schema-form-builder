{"version":3,"sources":["../../src/formBuilder/checkbox/FBCheckbox.js","../../src/formBuilder/Collapse/Collapse.js","../../src/formBuilder/radio/FBRadioButton.js","../../src/formBuilder/radio/FBRadioGroup.js","../../src/formBuilder/Tooltip.js","../../src/formBuilder/dependencies/DependencyWarning.js","../../src/formBuilder/dependencies/CardSelector.js","../../src/formBuilder/CardEnumOptions.js","../../src/formBuilder/utils.js","../../src/formBuilder/dependencies/ValueSelector.js","../../src/formBuilder/dependencies/DependencyPossibility.js","../../src/formBuilder/dependencies/DependencyField.js","../../src/formBuilder/CardModal.js","../../src/formBuilder/GeneralParameterInputs.js","../../src/formBuilder/CardGeneralParameterInputs.js","../../src/formBuilder/Add.js","../../src/formBuilder/Card.js","../../src/formBuilder/defaults/defaultInputs.js","../../src/formBuilder/Section.js","../../src/formBuilder/defaults/shortAnswerInputs.js","../../src/formBuilder/defaults/longAnswerInputs.js","../../src/formBuilder/defaults/numberInputs.js","../../src/formBuilder/defaults/arrayInputs.js","../../src/formBuilder/defaults/defaultFormInputs.js","../../src/formBuilder/FormBuilder.js","../../src/formBuilder/CardGallery.js","../../src/formBuilder/PredefinedGallery.js","tabs/Tabs.js","ErrorBoundary.js","JsonSchemaFormEditor.js","PlaygroundContainer.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","createUseStyles","checkbox","display","marginRight","FBCheckbox","onChangeValue","value","isChecked","label","use","disabled","id","dataTest","labelClassName","classjss","classes","classnames","potentialCheckboxId","checkboxId","data-test","className","type","onChange","checked","htmlFor","undefined","collapseElement","cursor","marginTop","padding","fontSize","margin","marginLeft","Collapse","props","iconClasses","fas","isOpen","disableToggle","onClick","React","FBRadioButton","name","required","autoFocus","key","radio","FBRadioGroup","options","defaultValue","horizontal","Math","option","index","typeMap","alert","help","toolTip","color","Example","text","style","textDecoration","href","autohide","placement","target","DependencyWarning","parameters","definedVals","Set","possibility","undefinedVals","Array","CardSelector","possibleChoices","chosenChoices","placeholder","path","choice","val","CardEnumOptions","initialValues","names","showNames","possibleValues","newVal","ev","parseFloat","Number","parseInt","Error","React.createElement","parse","JSON","stringify","obj","categoryType","allFormInputs","generateCategoryHash","categoryHash","Object","formInput","match","hash","getCardCategory","currentHash","cardProps","category","console","supportedPropertyParameters","supportedUiParameters","checkForUnsupportedFeatures","unsupportedFeatures","widgets","fields","supportedWidgets","supportedFields","supportedOptions","schema","property","uischema","propDefined","parameter","grouping","element","correctName","includes","uiProp","checkObjectForUnsupportedFeatures","generateElement","uiProps","newElement","elementDetails","dataProps","pathArr","definitionData","definitionUi","requiredNames","reservedKeys","generateElementPropsFromSchemas","elementDict","definedUiProps","group","possibilityIndex","children","requiredValues","cardPropList","remainder","elementArray","elementNames","elem","newElem","updateElementNames","countElementsFromSchema","schemaData","elementCount","generateSchemaElementFromElement","$ref","prop","generateSchemaFromElementProps","newSchema","dependencies","dependentElements","elementArr","oneOf","childrenComponents","properties","dependent","generateUiSchemaFromElementProps","uiSchema","uiOrder","definitions","uiOption","updateSchemas","newUiSchema","addCardObj","newElementObjArr","i","dataOptions","title","default","uiOptions","propType","neighborNames","addSectionObj","generateElementComponentsFromSchemas","uiSchemaData","hideKey","cardOpenArray","setCardOpenArray","mods","Card","Section","elementPropArr","expanded","elementProp","TypeSpecificParameters","getCardParameterInputComponentForType","componentProps","dependents","parent","newDataProps","newUiProps","propName","newCardObj","oldElement","onDelete","onMoveUp","tempBlock","onMoveDown","addElem","cardOpen","setCardOpen","oldSection","onNameChange","newName","onRequireToggle","onDependentsChange","newDependents","reference","onDragEnd","details","src","result","dest","propagateDefinitionChanges","propagateElementChange","updatedElementArr","updatedChildren","ValueSelector","parentEnums","parentType","parentName","parentSchema","enumType","enum","enumArr","combination","string","oldCombo","number","array","error","object","newCase","propArr","newEnum","DependencyPossibility","dependencyField","marginBottom","textAlign","border","borderRadius","flexDirection","width","DependencyField","valueBased","checkIfValueBasedDependency","selection","cardModal","height","CardModal","onClose","componentPropsState","setComponentProps","GeneralParameterInputs","CardBody","getCardBody","CardGeneralParameterInputs","keyState","setKeyState","titleState","setTitleState","descriptionState","setDescriptionState","categoryMap","categoryNameMap","categoryToNameMap","onBlur","readOnly","description","newCategory","newProps","defaultUiProps","defaultDataProps","firstDefinition","addDetails","borderBottom","Add","hidden","useState","popoverOpen","setPopoverOpen","createChoice","setCreateChoice","toggle","cardEntries","backgroundColor","fontWeight","cardInteractions","modalOpen","setModalOpen","toggleCollapse","CardDefaultParameterInputs","MultipleChoice","enumArray","containsUnparsableString","isNaN","containsString","isNumber","setIsNumber","enumNames","newNum","newEnumNames","defaultInputs","time","displayName","matchIf","types","format","defaultDataSchema","defaultUiSchema","cardBody","modalBody","ref","widget","dropdown","sectionContainer","borderTop","paddingTop","elementNum","defaultCollapseStates","keyName","setKeyName","message","droppableId","providedDroppable","innerRef","draggableId","providedDraggable","newComponentProps","formatDictionary","email","hostname","uri","regex","autoDictionary","username","password","country","CardShortAnswerParameterInputs","minLength","maxLength","rel","pattern","shortAnswerInput","shortAnswer","longAnswerInput","longAnswer","CardNumberParameterInputs","multipleOf","exclusiveMinimum","minimum","newMin","exclusiveMaximum","maximum","newMax","NumberField","numberInputs","integer","CardArrayParameterInputs","minItems","maxItems","InnerCardWrapper","defaultFormInputs","items","Item","newArr","DEFAULT_FORM_INPUTS","formBuilder","float","formHead","formBody","maxHeight","overflowY","minWidth","cssFloat","formFooter","FormBuilder","CardGallery","definitionSchema","definitionUiSchema","componentArr","oldUi","newUi","newDefinitions","preDefinedGallery","PredefinedGallery","references","findRefs","schemaObject","referenceSet","portalTabs","position","Tabs","defaultActiveTab","tabs","withSeparator","preventRerender","activeTab","setActiveTab","Nav","map","NavItem","NavLink","active","TabContent","content","TabPane","tabId","ErrorBoundary","state","hasError","this","setState","errorMessage","toString","onErr","errMessage","Component","checkError","language","data","e","JsonSchemaFormEditor","formData","formToggle","outputToggle","schemaFormErrorFlag","validFormInput","editorWidth","submissionData","err","schemaError","lang","schemaUiError","Alert","updateFormData","submitButtonMessage","onSubmit","Modal","ModalHeader","ModalBody","locale","ModalFooter","Button","updateSchema","updateUISchema","header","PlaygroundContainer","setSchema","setUischema","schemaTitle","uischemaTitle","App","Boolean","window","location","ReactDOM","render","Fragment","integrity","crossOrigin","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.3e25daaf.chunk.js","sourcesContent":["// @flow\n\nimport React from 'react';\nimport classnames from 'classnames';\nimport { createUseStyles } from 'react-jss';\n\nconst useStyles = createUseStyles({\n  checkbox: {\n    '& *': {\n      display: 'inline-block',\n    },\n    '& input': {\n      marginRight: '5px',\n    },\n  },\n});\n\ntype Props = {\n  onChangeValue: Function,\n  isChecked: boolean,\n  id?: string,\n  label?: string,\n  use?: string,\n  value?: string,\n  disabled?: boolean,\n  dataTest?: string,\n  labelClassName?: string,\n};\n\nconst FBCheckbox = ({\n  onChangeValue,\n  value = '',\n  isChecked = false,\n  label = '',\n  use = 'action',\n  disabled = false,\n  id = '',\n  dataTest = '',\n  labelClassName = '',\n}: Props) => {\n  const classjss = useStyles();\n  const classes = classnames('fb-checkbox', {\n    'edit-checkbox': !disabled && use === 'edit',\n    'action-checkbox': !disabled && use === 'action',\n    'disabled-checked-checkbox': disabled && isChecked,\n    'disabled-unchecked-checkbox': disabled && !isChecked,\n  });\n  const potentialCheckboxId = id !== '' ? id : label;\n  const checkboxId = potentialCheckboxId !== '' ? potentialCheckboxId : null;\n  return (\n    <div data-test='checkbox' className={`${classes} ${classjss.checkbox}`}>\n      <input\n        type='checkbox'\n        id={checkboxId}\n        data-test={dataTest || undefined}\n        onChange={disabled ? () => {} : onChangeValue}\n        value={value}\n        disabled={disabled}\n        checked={isChecked}\n      />\n      <div className='checkbox-overlay'>\n        {label && (\n          <label htmlFor={checkboxId} className={labelClassName || undefined}>\n            {label}\n          </label>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default FBCheckbox;\n","// @flow\n\nimport React from 'react';\nimport type { Node } from 'react';\nimport { createUseStyles } from 'react-jss';\nimport { Collapse as RSCollapse } from 'reactstrap';\nimport classnames from 'classnames';\n\nconst useStyles = createUseStyles({\n  collapseElement: {\n    '& .disabled': { 'i.toggle-collapse': { cursor: 'default' } },\n    '& h4': { marginTop: '7px', padding: '13px 10px 10px 10px' },\n    '& i.toggle-collapse': {\n      fontSize: '2.3rem',\n      margin: '17px',\n      cursor: 'pointer',\n      marginLeft: '0',\n    },\n  },\n});\n\ntype Props = {\n  // Determines if the Collapse component is open\n  isOpen: boolean,\n  // Toggles the isOpen boolean between true and false\n  toggleCollapse: () => void,\n  // The title to display in the collapse header\n  title: Node,\n  // Anything to be rendered within the collapse\n  children: any,\n  // If true will gray out and disable */\n  disableToggle?: boolean,\n  className?: string,\n};\n\nconst Collapse = (props: Props) => {\n  const iconClasses = classnames({\n    'toggle-collapse': true,\n    fas: true,\n    'fa-caret-down': props.isOpen,\n    'fa-caret-right': !props.isOpen,\n  });\n\n  const classes = classnames(\n    `collapse-element ${props.className || ''} ${useStyles().collapseElement}`,\n    {\n      disabled: props.disableToggle,\n    },\n  );\n\n  return (\n    <div className={classes}>\n      <div className='d-flex'>\n        <i\n          onClick={!props.disableToggle ? props.toggleCollapse : () => {}}\n          className={iconClasses}\n        />\n        <h4>{props.title}</h4>\n      </div>\n      <RSCollapse isOpen={props.isOpen}>\n        <div>{props.children}</div>\n      </RSCollapse>\n    </div>\n  );\n};\n\nexport default Collapse;\n","// @flow\n\nimport React from 'react';\nimport classnames from 'classnames';\n\ntype Props = {\n  label: string | number,\n  value?: any,\n  name?: string,\n  checked?: boolean,\n  required?: boolean,\n  disabled?: boolean,\n  autoFocus?: boolean,\n  children?: any,\n  onChange: (any) => void,\n};\n\nexport default function FBRadioButton(props: Props) {\n  const {\n    label,\n    value,\n    checked,\n    name,\n    onChange,\n    required,\n    disabled,\n    autoFocus,\n  } = props;\n  const classes = classnames('fb-radio-button', { disabled });\n  return (\n    <label className={classes} key={value}>\n      {props.children}\n      <input\n        type='radio'\n        name={name}\n        value={value}\n        checked={checked}\n        required={required}\n        disabled={disabled}\n        autoFocus={autoFocus}\n        onChange={() => onChange(value)}\n      />\n      <span className='fb-custom-radio-button' />\n      {label}\n    </label>\n  );\n}\n","// @flow\n\nimport React from 'react';\nimport classnames from 'classnames';\nimport { createUseStyles } from 'react-jss';\nimport FBRadioButton from './FBRadioButton';\n\nconst useStyles = createUseStyles({\n  radio: {\n    '& input': {\n      marginRight: '5px',\n    },\n  },\n});\n\ntype Props = {\n  options: Array<{ label: string | number, value: string | number }>,\n  defaultValue?: any,\n  horizontal?: boolean,\n  id?: string,\n  required?: boolean,\n  disabled?: boolean,\n  autoFocus?: boolean,\n  onChange: (any) => void,\n};\n\nexport default function FBRadioGroup(props: Props) {\n  const {\n    options,\n    defaultValue,\n    onChange,\n    horizontal,\n    id,\n    autoFocus,\n    disabled,\n  } = props;\n  const name = Math.random().toString();\n  const classjss = useStyles();\n  const classes = classnames('fb-radio-group', {\n    horizontal,\n  });\n  return (\n    <div id={id} className={`${classes} ${classjss.radio}`}>\n      {options.map((option, index) => (\n        <FBRadioButton\n          value={option.value}\n          label={option.label}\n          id={id}\n          name={name}\n          key={option.value}\n          checked={option.value === defaultValue}\n          autoFocus={autoFocus && index === 1}\n          onChange={onChange}\n          disabled={disabled}\n        />\n      ))}\n    </div>\n  );\n}\n","// @flow\n\n/* eslint react/no-multi-comp: 0, react/prop-types: 0 */\nimport React from 'react';\nimport type { Node } from 'react';\nimport { UncontrolledTooltip } from 'reactstrap';\nimport { createUseStyles } from 'react-jss';\n\nconst typeMap = {\n  alert: `fas fa-asterisk`,\n  help: 'fa fa-question-circle',\n};\n\nconst useStyles = createUseStyles({\n  toolTip: {\n    color: 'white',\n    'background-color': 'black',\n  },\n});\n\nexport default function Example({\n  text,\n  type,\n  id,\n}: {\n  text: Node,\n  type: 'alert' | 'help',\n  id: string,\n}) {\n  const classes = useStyles();\n\n  return (\n    <React.Fragment>\n      <span\n        style={{ textDecoration: 'underline', color: 'blue' }}\n        href='#'\n        id={id}\n      >\n        <i className={typeMap[type]} />\n      </span>\n      <UncontrolledTooltip\n        autohide={false}\n        className={classes.toolTip}\n        placement='top'\n        target={id}\n      >\n        {text}\n      </UncontrolledTooltip>\n    </React.Fragment>\n  );\n}\n","// @flow\n\nimport * as React from 'react';\nimport Tooltip from '../Tooltip';\n\n// warning message if not all possibilities specified\nexport default function DependencyWarning({\n  parameters,\n}: {\n  parameters: {\n    [string]: any,\n    name?: string,\n    dependents?: Array<{\n      children: Array<string>,\n      value?: any,\n    }>,\n    type?: string,\n    enum?: Array<string | number>,\n    neighborNames?: Array<string>,\n    schema?: string,\n  },\n}) {\n  if (\n    parameters.enum &&\n    parameters.dependents &&\n    parameters.dependents.length &&\n    parameters.dependents[0].value\n  ) {\n    // get the set of defined enum values\n    const definedVals = new Set([]);\n    parameters.dependents.forEach((possibility) => {\n      if (possibility.value && possibility.value.enum)\n        possibility.value.enum.forEach((val) => definedVals.add(val));\n    });\n    const undefinedVals = [];\n    if (Array.isArray(parameters.enum))\n      parameters.enum.forEach((val) => {\n        if (!definedVals.has(val)) undefinedVals.push(val);\n      });\n    if (undefinedVals.length === 0) return null;\n    return (\n      <React.Fragment>\n        <p>\n          Warning! The following values do not have associated dependency\n          values:{' '}\n          <Tooltip\n            id={`${parameters.path}_valuewarning`}\n            type='help'\n            text='Each possible value for a value-based dependency must be defined to work properly'\n          />\n        </p>\n\n        <ul>\n          {undefinedVals.map((val, index) => (\n            <li key={index}>{val}</li>\n          ))}\n        </ul>\n      </React.Fragment>\n    );\n  }\n\n  return null;\n}\n","// @flow\n\nimport * as React from 'react';\nimport Select from 'react-select';\n\n// a field that lets you choose adjacent blocks\nexport default function CardSelector({\n  possibleChoices,\n  chosenChoices,\n  onChange,\n  placeholder,\n  path,\n}: {\n  possibleChoices: Array<string>,\n  chosenChoices: Array<string>,\n  onChange: (chosenChoices: Array<string>) => void,\n  placeholder: string,\n  path: string,\n}) {\n  return (\n    <React.Fragment>\n      <ul>\n        {chosenChoices.map((chosenChoice, index) => (\n          <li key={`${path}_neighbor_${index}`}>\n            {chosenChoice}{' '}\n            <i\n              className='fa fa-times'\n              onClick={() =>\n                onChange([\n                  ...chosenChoices.slice(0, index),\n                  ...chosenChoices.slice(index + 1),\n                ])\n              }\n            />\n          </li>\n        ))}\n      </ul>\n      <Select\n        value={{\n          value: '',\n          label: '',\n        }}\n        placeholder={placeholder}\n        options={possibleChoices\n          .filter((choice) => !chosenChoices.includes(choice))\n          .map((choice) => ({\n            value: choice,\n            label: choice,\n          }))}\n        onChange={(val: any) => {\n          onChange([...chosenChoices, val.value]);\n        }}\n        className='card-modal-select'\n      />\n    </React.Fragment>\n  );\n}\n","// @flow\n\nimport * as React from 'react';\nimport { Input } from 'reactstrap';\n\n// Input field corresponding to an array of values, add and remove\nexport default function CardEnumOptions({\n  initialValues,\n  names,\n  showNames,\n  onChange,\n  type,\n}: {\n  initialValues: Array<any>,\n  names?: Array<string>,\n  showNames: boolean,\n  onChange: (newEnums: Array<any>, newEnumNames?: Array<string>) => void,\n  type: string,\n}) {\n  const possibleValues = [];\n  for (let index = 0; index < initialValues.length; index += 1) {\n    const value = initialValues[index];\n    let name = `${value}`;\n    if (names && index < names.length) name = names[index];\n    possibleValues.push(\n      <div key={index} className='card-enum-option'>\n        <Input\n          value={value === undefined || value === null ? '' : value}\n          placeholder='Possible Value'\n          key={`val-${index}`}\n          type={type === 'string' ? 'text' : 'number'}\n          onChange={(ev: any) => {\n            let newVal;\n            switch (type) {\n              case 'string':\n                newVal = ev.target.value;\n                break;\n              case 'number':\n              case 'integer':\n                newVal = parseFloat(ev.target.value);\n                if (Number.isInteger(newVal))\n                  newVal = parseInt(ev.target.value, 10);\n                if (Number.isNaN(newVal)) newVal = type === 'string' ? '' : 0;\n                break;\n              default:\n                throw new Error(`Enum called with unknown type ${type}`);\n            }\n            onChange(\n              [\n                ...initialValues.slice(0, index),\n                newVal,\n                ...initialValues.slice(index + 1),\n              ],\n              names,\n            );\n          }}\n          className='card-text'\n        />\n        <Input\n          value={name || ''}\n          placeholder='Name'\n          key={`name-${index}`}\n          type='text'\n          onChange={(ev: any) => {\n            if (names)\n              onChange(initialValues, [\n                ...names.slice(0, index),\n                ev.target.value,\n                ...names.slice(index + 1),\n              ]);\n          }}\n          className='card-text'\n          style={{ display: showNames ? 'initial' : 'none' }}\n        />\n        <i\n          className='fa fa-trash'\n          onClick={() => {\n            // remove this value\n            onChange(\n              [\n                ...initialValues.slice(0, index),\n                ...initialValues.slice(index + 1),\n              ],\n              names\n                ? [...names.slice(0, index), ...names.slice(index + 1)]\n                : undefined,\n            );\n          }}\n        />\n      </div>,\n    );\n  }\n\n  return (\n    <React.Fragment>\n      <div className='card-enum-header'>\n        <p> Value </p>\n        <h5 style={{ display: showNames ? 'initial' : 'none' }}>\n          {' '}\n          Display Label{' '}\n        </h5>\n      </div>\n      {possibleValues}\n      <i\n        className='fa fa-plus'\n        onClick={() => {\n          // add a new dropdown option\n          onChange(\n            [...initialValues, type === 'string' ? '' : 0],\n            names ? [...names, ''] : undefined,\n          );\n        }}\n      />\n    </React.Fragment>\n  );\n}\n","// @flow\nimport * as React from 'react';\nimport type { CardProps, ElementProps, FormInput, Mods } from './types';\n\n// parse in either YAML or JSON\nexport function parse(text: string) {\n  if (!text) return {};\n  return JSON.parse(text);\n}\n\n// stringify in either YAML or JSON\nexport function stringify(obj: any) {\n  if (!obj) return '{}';\n  return JSON.stringify(obj);\n}\n\nexport function defaultDataProps(\n  category: string,\n  allFormInputs: { [string]: FormInput },\n) {\n  return allFormInputs[category].defaultDataSchema;\n}\n\nexport function defaultUiProps(\n  category: string,\n  allFormInputs: { [string]: FormInput },\n) {\n  return allFormInputs[category].defaultUiSchema;\n}\nexport function categoryType(\n  category: string,\n  allFormInputs: { [string]: FormInput },\n) {\n  return allFormInputs[category].type;\n}\nexport function getCardBody(\n  category: string,\n  allFormInputs: { [string]: FormInput },\n) {\n  return allFormInputs[category].cardBody;\n}\nexport function categoryToNameMap(\n  category: string,\n  allFormInputs: { [string]: FormInput },\n) {\n  const categoryNameMap = {};\n  Object.keys(allFormInputs).forEach((inputName) => {\n    categoryNameMap[inputName] = allFormInputs[inputName].displayName;\n  });\n  return categoryNameMap;\n}\n\nfunction updateElementNames(elementArray: Array<ElementProps>) {\n  const elementNames = elementArray.map((elem) => elem.name);\n  return elementArray.map((elem) => {\n    const newElem = elem;\n    newElem.neighborNames = elementNames;\n    return newElem;\n  });\n}\n\nexport function generateCategoryHash(allFormInputs: { [string]: FormInput }) {\n  const categoryHash = {};\n  Object.keys(allFormInputs).forEach((categoryName) => {\n    const formInput = allFormInputs[categoryName];\n    formInput.matchIf.forEach((match) => {\n      match.types.forEach((type) => {\n        const hash = `type:${type || ''};widget:${match.widget || ''};field:${\n          match.field || ''\n        };format:${match.format || ''};$ref:${\n          match.$ref ? 'true' : 'false'\n        };enum:${match.enum ? 'true' : 'false'}`;\n        if (categoryHash[hash]) {\n          throw new Error(`Duplicate hash: ${hash}`);\n        }\n        categoryHash[hash] = categoryName;\n      });\n    });\n  });\n\n  return categoryHash;\n}\n\n// determines a card's category based on it's properties\n// mostly useful for reading a schema for the first time\nexport function getCardCategory(\n  cardProps: CardProps,\n  categoryHash: { [string]: string },\n) {\n  const currentHash = `type:${cardProps.dataOptions.type || ''};widget:${\n    cardProps.uiOptions['ui:widget'] || ''\n  };field:${cardProps.uiOptions['ui:field'] || ''};format:${\n    cardProps.dataOptions.format || ''\n  };$ref:${cardProps.$ref !== undefined ? 'true' : 'false'};enum:${\n    cardProps.dataOptions.enum ? 'true' : 'false'\n  }`;\n  const category = categoryHash[currentHash];\n  if (!category) {\n    if (cardProps.$ref) return 'ref';\n    // eslint-disable-next-line no-console\n    console.error(`No match for card': ${currentHash} among set`);\n    return 'shortAnswer';\n  }\n  return category;\n}\n\n// check for unsupported feature in schema and uischema\nconst supportedPropertyParameters = new Set([\n  'title',\n  'description',\n  'enum',\n  'minLength',\n  'maxLength',\n  'multipleOf',\n  'minimum',\n  'maximum',\n  'format',\n  'exclusiveMinimum',\n  'exclusiveMaximum',\n  'type',\n  'default',\n  'pattern',\n  'required',\n  'properties',\n  'items',\n  'definitions',\n  '$ref',\n  'minItems',\n  'maxItems',\n  'enumNames',\n  'dependencies',\n  '$id',\n]);\n\nconst supportedUiParameters = new Set([\n  'ui:order',\n  'ui:widget',\n  'ui:autofocus',\n  'ui:autocomplete',\n  'ui:option',\n  'ui:field',\n  'items',\n  'definitions',\n]);\n\n// recursively called function to check an object for unsupported features\nfunction checkObjectForUnsupportedFeatures(\n  schema: { [string]: any },\n  uischema: { [string]: any },\n  supportedWidgets: Set<string>,\n  supportedFields: Set<string>,\n  supportedOptions: Set<string>,\n) {\n  // add each unsupported feature to this array\n  const unsupportedFeatures = [];\n\n  // check for unsupported whole object features\n  if (schema && typeof schema === 'object')\n    Object.keys(schema).forEach((property) => {\n      if (\n        !supportedPropertyParameters.has(property) &&\n        property !== 'properties'\n      )\n        unsupportedFeatures.push(`Unrecognized Object Property: ${property}`);\n    });\n\n  if (uischema && typeof uischema === 'object')\n    Object.keys(uischema).forEach((uiProperty) => {\n      let propDefined = false;\n      // search for the property in the schema properties and dependencies\n      if (\n        schema.properties &&\n        Object.keys(schema.properties).includes(uiProperty)\n      )\n        propDefined = true;\n      if (schema.dependencies) {\n        Object.keys(schema.dependencies).forEach((dependencyKey) => {\n          Object.keys(schema.dependencies[dependencyKey]).forEach(\n            (parameter) => {\n              if (parameter === 'oneOf') {\n                schema.dependencies[dependencyKey].oneOf.forEach((grouping) => {\n                  if (grouping.properties)\n                    if (Object.keys(grouping.properties).includes(uiProperty))\n                      propDefined = true;\n                });\n              } else if (parameter === 'properties') {\n                if (\n                  Object.keys(\n                    schema.dependencies[dependencyKey].properties,\n                  ).includes(uiProperty)\n                )\n                  propDefined = true;\n              }\n            },\n          );\n        });\n      }\n\n      if (!propDefined && !supportedUiParameters.has(uiProperty))\n        unsupportedFeatures.push(\n          `Unrecognized UI schema property: ${uiProperty}`,\n        );\n    });\n\n  // check for unsupported property parameters\n  if (schema.properties)\n    Object.entries(schema.properties).forEach(\n      ([parameter, element]: [string, any]) => {\n        const correctName = parameter.replace(/\\W/g, '_');\n        if (parameter !== correctName) {\n          unsupportedFeatures.push(\n            `Improper name '${parameter}': using '${correctName}' instead`,\n          );\n        }\n        if (\n          element &&\n          typeof element === 'object' &&\n          element.type &&\n          element.type !== 'object'\n        ) {\n          // make sure that the type is valid\n          if (\n            !['array', 'string', 'integer', 'number', 'boolean'].includes(\n              element.type,\n            )\n          )\n            unsupportedFeatures.push(\n              `Unrecognized type: ${element.type} in ${parameter}`,\n            );\n          // check the properties of each property if it is a basic object\n          Object.keys(element).forEach((key) => {\n            if (!supportedPropertyParameters.has(key))\n              unsupportedFeatures.push(\n                `Property Parameter: ${key} in ${parameter}`,\n              );\n          });\n        } else {\n          // check the properties of each property if it is a basic object\n          Object.keys(element).forEach((key) => {\n            if (!supportedPropertyParameters.has(key))\n              unsupportedFeatures.push(\n                `Property Parameter: ${key} in ${parameter}`,\n              );\n          });\n        }\n\n        // check for unsupported UI components\n        if (\n          uischema &&\n          uischema[parameter] &&\n          element &&\n          (!element.type || element.type !== 'object')\n        ) {\n          // check for unsupported ui properties\n          Object.keys(uischema[parameter]).forEach((uiProp) => {\n            if (!supportedUiParameters.has(uiProp))\n              unsupportedFeatures.push(\n                `UI Property: ${uiProp} for ${parameter}`,\n              );\n\n            // check for unsupported ui widgets\n            if (\n              uiProp === 'ui:widget' &&\n              !supportedWidgets.has(uischema[parameter][uiProp])\n            ) {\n              unsupportedFeatures.push(\n                `UI Widget: ${uischema[parameter][uiProp]} for ${parameter}`,\n              );\n            }\n\n            // check for unsupported ui fields\n            if (\n              uiProp === 'ui:field' &&\n              !supportedFields.has(uischema[parameter][uiProp])\n            )\n              unsupportedFeatures.push(\n                `UI Field: ${uischema[parameter][uiProp]} for ${parameter}`,\n              );\n\n            // check unsupported ui option\n            if (uiProp === 'ui:option')\n              Object.keys(uischema[parameter]['ui:option']).forEach(\n                (uiOption) => {\n                  if (!supportedOptions.has(uiOption))\n                    unsupportedFeatures.push(\n                      `UI Property: ui:option.${uiOption} for ${parameter}`,\n                    );\n                },\n              );\n          });\n        }\n      },\n    );\n  return unsupportedFeatures;\n}\n\n// parent function that checks for unsupported features in an entire document\nexport function checkForUnsupportedFeatures(\n  schema: { [string]: any },\n  uischema: { [string]: any },\n  allFormInputs: { [string]: FormInput },\n) {\n  // add each unsupported feature to this array\n  const unsupportedFeatures = [];\n\n  const widgets = [];\n  const fields = [];\n  const options = [];\n  Object.keys(allFormInputs).forEach((inputType) => {\n    allFormInputs[inputType].matchIf.forEach((match) => {\n      if (match.widget && !widgets.includes(match.widget))\n        widgets.push(match.widget);\n      if (match.field && !fields.includes(match.field))\n        fields.push(match.field);\n    });\n    if (\n      allFormInputs[inputType].possibleOptions &&\n      Array.isArray(allFormInputs[inputType].possibleOptions)\n    ) {\n      options.push(...allFormInputs[inputType].possibleOptions);\n    }\n  });\n  const supportedWidgets = new Set(widgets);\n  const supportedFields = new Set(fields);\n  const supportedOptions = new Set(options);\n\n  // check for unsupported whole form features\n  if (schema && typeof schema === 'object' && schema.type === 'object') {\n    unsupportedFeatures.push(\n      ...checkObjectForUnsupportedFeatures(\n        schema,\n        uischema,\n        supportedWidgets,\n        supportedFields,\n        supportedOptions,\n      ),\n    );\n  } else {\n    unsupportedFeatures.push('jsonSchema form is not of type object');\n  }\n\n  return unsupportedFeatures;\n}\n\n// make an element out of the corresponding properties and UI properties\nfunction generateElement(\n  name: string,\n  dataProps: any,\n  uiProperties: any,\n  requiredNames: any,\n  definitionData?: { [string]: any },\n  definitionUi?: { [string]: any },\n  categoryHash: { [string]: string },\n) {\n  let uiProps = {\n    ...uiProperties,\n  };\n  const newElement = {};\n  let elementDetails =\n    dataProps && typeof dataProps === 'object' ? dataProps : {};\n\n  // populate newElement with reference if applicable\n  if (elementDetails.$ref !== undefined && definitionData) {\n    const pathArr =\n      typeof elementDetails.$ref === 'string'\n        ? elementDetails.$ref.split('/')\n        : [];\n    if (\n      pathArr[0] === '#' &&\n      pathArr[1] === 'definitions' &&\n      definitionData[pathArr[2]]\n    ) {\n      elementDetails = {\n        ...elementDetails,\n        ...definitionData[pathArr[2]],\n      };\n    }\n\n    const definedUiProps = (definitionUi || {})[pathArr[2]];\n    uiProps = {\n      ...(definedUiProps || {}),\n      ...uiProps,\n    };\n  }\n\n  newElement.name = name;\n  newElement.required = requiredNames.includes(name);\n  newElement.$ref =\n    typeof elementDetails.$ref === 'string' ? elementDetails.$ref : undefined;\n\n  if (elementDetails.type && elementDetails.type === 'object') {\n    // create a section\n    newElement.schema = elementDetails;\n    newElement.uischema = uiProps || {};\n    newElement.propType = 'section';\n  } else {\n    // create a card\n    newElement.dataOptions = elementDetails;\n    newElement.uiOptions = uiProps || {};\n\n    // ensure that uiOptions does not have duplicate keys with dataOptions\n    const reservedKeys = Object.keys(newElement.dataOptions);\n    Object.keys(newElement.uiOptions).forEach((uiKey) => {\n      if (reservedKeys.includes(uiKey)) {\n        newElement.uiOptions[`ui:*${uiKey}`] = newElement.uiOptions[uiKey];\n      }\n    });\n\n    newElement.dataOptions.category = getCardCategory(newElement, categoryHash);\n    newElement.propType = 'card';\n  }\n  return newElement;\n}\n\n// generate an array of element objects from a schema and uischema\nexport function generateElementPropsFromSchemas(parameters: {\n  schema: { [string]: any },\n  uischema: { [string]: any },\n  definitionData?: { [string]: any },\n  definitionUi?: { [string]: any },\n  categoryHash: { [string]: string },\n}) {\n  const {\n    schema,\n    uischema,\n    definitionData,\n    definitionUi,\n    categoryHash,\n  } = parameters;\n\n  if (!schema.properties) return [];\n\n  const elementDict = {};\n  const requiredNames = schema.required ? schema.required : [];\n\n  // read regular elements from properties\n  Object.entries(schema.properties).forEach(([parameter, element]) => {\n    const newElement = {};\n    let elementDetails =\n      element && typeof element === 'object'\n        ? (element: {\n            ...any,\n            $ref?: string,\n          })\n        : {};\n\n    // populate newElement with reference if applicable\n    if (elementDetails.$ref !== undefined && definitionData) {\n      if (\n        elementDetails.$ref &&\n        !elementDetails.$ref.startsWith('#/definitions')\n      )\n        throw new Error(\n          `Invalid definition, not at '#/definitions': ${elementDetails.$ref}`,\n        );\n      const pathArr =\n        elementDetails.$ref !== undefined ? elementDetails.$ref.split('/') : [];\n      if (\n        pathArr[0] === '#' &&\n        pathArr[1] === 'definitions' &&\n        definitionData[pathArr[2]]\n      ) {\n        elementDetails = {\n          ...elementDetails,\n          ...definitionData[pathArr[2]],\n        };\n      }\n\n      const definedUiProps = (definitionUi || {})[pathArr[2]];\n      uischema[parameter] = {\n        ...(definedUiProps || {}),\n        ...uischema[parameter],\n      };\n    }\n\n    newElement.name = parameter;\n    newElement.required = requiredNames.includes(parameter);\n    newElement.$ref = elementDetails.$ref;\n\n    if (elementDetails.type && elementDetails.type === 'object') {\n      // create a section\n      newElement.schema = elementDetails;\n      newElement.uischema = uischema[parameter] || {};\n      newElement.propType = 'section';\n    } else {\n      // create a card\n      newElement.dataOptions = elementDetails;\n      newElement.uiOptions = uischema[parameter] || {};\n\n      // ensure that uiOptions does not have duplicate keys with dataOptions\n      const reservedKeys = Object.keys(newElement.dataOptions);\n      Object.keys(newElement.uiOptions).forEach((uiKey) => {\n        if (reservedKeys.includes(uiKey)) {\n          newElement.uiOptions[`ui:*${uiKey}`] = newElement.uiOptions[uiKey];\n        }\n      });\n\n      newElement.dataOptions.category = getCardCategory(\n        newElement,\n        categoryHash,\n      );\n      newElement.propType = 'card';\n    }\n    elementDict[newElement.name] = newElement;\n  });\n  // read dependent elements from dependencies\n  if (schema.dependencies) {\n    Object.keys(schema.dependencies).forEach((parent) => {\n      const group = schema.dependencies[parent];\n      if (group.oneOf) {\n        let possibilityIndex = 0;\n        group.oneOf.forEach((possibility) => {\n          if (!elementDict[parent].dependents) {\n            elementDict[parent].dependents = [];\n          }\n          elementDict[parent].dependents.push({\n            children: [],\n            value: possibility.properties[parent],\n          });\n          const requiredValues = possibility.required || [];\n          Object.entries(possibility.properties).forEach(\n            ([parameter, element]) => {\n              // create a new element if not present in main properties\n              if (!Object.keys(elementDict).includes(parameter)) {\n                const newElement = generateElement(\n                  parameter,\n                  element,\n                  uischema[parameter],\n                  requiredNames,\n                  definitionData,\n                  definitionUi,\n                  categoryHash,\n                );\n                newElement.required = requiredValues.includes(newElement.name);\n                elementDict[newElement.name] = newElement;\n              }\n              if (parameter !== parent) {\n                const newElement = elementDict[parameter];\n                newElement.dependent = true;\n                newElement.parent = parent;\n                elementDict[parent].dependents[possibilityIndex].children.push(\n                  parameter,\n                );\n              }\n            },\n          );\n          possibilityIndex += 1;\n        });\n      } else if (group.properties) {\n        const requiredValues = group.required || [];\n        Object.entries(group.properties).forEach(([parameter, element]) => {\n          const newElement = generateElement(\n            parameter,\n            element,\n            uischema[parameter],\n            requiredNames,\n            definitionData,\n            definitionUi,\n            categoryHash,\n          );\n          newElement.required = requiredValues.includes(newElement.name);\n          newElement.dependent = true;\n          newElement.parent = parent;\n          elementDict[newElement.name] = newElement;\n          if (elementDict[parent].dependents) {\n            elementDict[parent].dependents[0].children.push(parameter);\n          } else {\n            elementDict[parent].dependents = [{ children: [parameter] }];\n          }\n        });\n      } else {\n        // eslint-disable-next-line no-console\n        console.error('unsupported dependency type encountered');\n      }\n    });\n  }\n\n  // now reorder in accordance with ui:order if defined\n  const cardPropList = [];\n  if (uischema['ui:order']) {\n    // in case there are any options not in ui:order\n    const remainder = [];\n    Object.keys(elementDict).forEach((name) => {\n      if (!uischema['ui:order'].includes(name))\n        remainder.push(elementDict[name]);\n    });\n\n    // map ui order elements into the right order\n    uischema['ui:order'].forEach((name) => {\n      // if contains the wildcard *, insert remainder cards there\n      if (name === '*') {\n        remainder.forEach((remCard) => {\n          cardPropList.push(remCard);\n        });\n      } else if (elementDict[name]) {\n        cardPropList.push(elementDict[name]);\n      }\n    });\n  } else {\n    Object.keys(elementDict).forEach((name) => {\n      cardPropList.push(elementDict[name]);\n    });\n  }\n\n  updateElementNames(cardPropList);\n  return (cardPropList: Array<ElementProps>);\n}\n\n// determine the number of element objects from schema and uischema\nexport function countElementsFromSchema(schemaData: any) {\n  if (!schemaData.properties) return 0;\n  const elementDict = {};\n  let elementCount = 0;\n\n  // read regular elements from properties\n  Object.entries(schemaData.properties).forEach(([parameter]) => {\n    elementDict[parameter] = {};\n    elementCount += 1;\n  });\n  // read dependent elements from dependencies\n  if (schemaData.dependencies) {\n    Object.keys(schemaData.dependencies).forEach((parent) => {\n      const group = schemaData.dependencies[parent];\n      if (group.oneOf) {\n        let possibilityIndex = 0;\n        group.oneOf.forEach((possibility) => {\n          if (!elementDict[parent].dependents) {\n            elementDict[parent].dependents = [];\n          }\n          elementDict[parent].dependents.push({\n            children: [],\n            value: possibility.properties[parent],\n          });\n          Object.entries(possibility.properties).forEach(([parameter]) => {\n            // create a new element if not present in main properties\n            if (!Object.keys(elementDict).includes(parameter)) {\n              elementDict[parameter] = {};\n              elementCount += 1;\n            }\n            if (parameter !== parent) {\n              const newElement = elementDict[parameter];\n              newElement.dependent = true;\n              newElement.parent = parent;\n              elementDict[parent].dependents[possibilityIndex].children.push(\n                parameter,\n              );\n            }\n          });\n          possibilityIndex += 1;\n        });\n      } else if (group.properties) {\n        Object.entries(group.properties).forEach(([parameter]) => {\n          elementDict[parameter] = {};\n          elementCount += 1;\n          if (elementDict[parent].dependents) {\n            elementDict[parent].dependents[0].children.push(parameter);\n          } else {\n            elementDict[parent].dependents = [{ children: [parameter] }];\n          }\n        });\n      } else {\n        // eslint-disable-next-line no-console\n        console.error('unsupported dependency type encountered');\n      }\n    });\n  }\n\n  return (elementCount: number);\n}\n\n// convert an element into a schema equivalent\nfunction generateSchemaElementFromElement(element: ElementProps) {\n  if (element.$ref !== undefined) {\n    return {\n      $ref: element.$ref,\n    };\n  } else if (element.propType === 'card') {\n    if (element.dataOptions.category === 'section') {\n      return {\n        type: 'object',\n      };\n    } else {\n      const prop = {};\n\n      Object.keys(element.dataOptions).forEach((key) => {\n        if (\n          ![\n            'category',\n            'hideKey',\n            'path',\n            'definitionData',\n            'definitionUi',\n            'allFormInputs',\n          ].includes(key) &&\n          element.dataOptions[key] !== ''\n        )\n          prop[key] = element.dataOptions[key];\n      });\n      return prop;\n    }\n  } else if (element.propType === 'section') {\n    return element.schema;\n  } else {\n    throw new Error('Element that is neither card, section, nor ref');\n  }\n}\n\n// generate a new schema from a complete array of card objects\nexport function generateSchemaFromElementProps(\n  elementArr: Array<ElementProps>,\n) {\n  if (!elementArr) return {};\n  const newSchema = {};\n\n  const props = {};\n  const dependencies = {};\n  const elementDict = {};\n  const dependentElements = new Set([]);\n  for (let index = 0; index < elementArr.length; index += 1) {\n    const element = elementArr[index];\n    elementDict[element.name] = { ...element };\n    if (element.dependents)\n      element.dependents.forEach((possibility) => {\n        possibility.children.forEach((dependentElement) => {\n          dependentElements.add(dependentElement);\n        });\n      });\n  }\n  Object.keys(elementDict).forEach((elementName) => {\n    const element = elementDict[elementName];\n    if (element.dependents && element.dependents[0]) {\n      if (element.dependents[0].value) {\n        // handle value based case\n        dependencies[elementName] = {\n          oneOf: element.dependents.map((possibility) => {\n            const childrenComponents = {};\n            const requiredValues = [];\n            possibility.children.forEach((child) => {\n              if (elementDict[child]) {\n                childrenComponents[child] = generateSchemaElementFromElement(\n                  elementDict[child],\n                );\n                if (elementDict[child].required) requiredValues.push(child);\n              }\n            });\n            return {\n              properties: {\n                [elementName]: possibility.value,\n                ...childrenComponents,\n              },\n              required: requiredValues,\n            };\n          }),\n        };\n      } else {\n        // handle definition based case\n        const childrenComponents = {};\n        const requiredValues = [];\n        element.dependents[0].children.forEach((child) => {\n          childrenComponents[child] = generateSchemaElementFromElement(\n            elementDict[child],\n          );\n          if (elementDict[child].required) requiredValues.push(child);\n        });\n        dependencies[elementName] = {\n          properties: childrenComponents,\n          required: requiredValues,\n        };\n      }\n    }\n    if (!dependentElements.has(elementName))\n      props[element.name] = generateSchemaElementFromElement(element);\n  });\n\n  newSchema.properties = props;\n  newSchema.dependencies = dependencies;\n  newSchema.required = elementArr\n    .filter(({ required, dependent }) => required && !dependent)\n    .map<string>(({ name }) => name);\n\n  return newSchema;\n}\n\nexport function generateUiSchemaFromElementProps(\n  elementArr: Array<ElementProps>,\n  definitionUi: any,\n) {\n  if (!elementArr) return {};\n\n  const uiSchema = {};\n  const uiOrder = [];\n  const definitions = definitionUi;\n\n  elementArr.forEach((element) => {\n    uiOrder.push(element.name);\n    if (element.$ref !== undefined) {\n      // look for the reference\n      const pathArr =\n        typeof element.$ref === 'string' ? element.$ref.split('/') : [];\n      if (definitions && definitions[pathArr[2]])\n        uiSchema[element.name] = definitions[pathArr[2]];\n    } else if (element.propType === 'card' && element.uiOptions) {\n      Object.keys(element.uiOptions).forEach((uiOption) => {\n        if (!uiSchema[element.name]) uiSchema[element.name] = {};\n        if (uiOption.startsWith('ui:*')) {\n          uiSchema[element.name][uiOption.substring(4)] =\n            element.uiOptions[uiOption];\n        } else {\n          uiSchema[element.name][uiOption] = element.uiOptions[uiOption];\n        }\n      });\n    } else if (element.propType === 'section' && element.uischema) {\n      uiSchema[element.name] = element.uischema;\n    }\n  });\n\n  uiSchema['ui:order'] = uiOrder;\n\n  return uiSchema;\n}\n\nexport function getCardParameterInputComponentForType(\n  category: string,\n  allFormInputs: { [string]: FormInput },\n) {\n  return allFormInputs[category].modalBody;\n}\n\n// takes in an array of Card Objects and updates both schemas\nexport function updateSchemas(\n  elementArr: Array<ElementProps>,\n  parameters: {\n    schema: { [string]: any },\n    uischema: { [string]: any },\n    onChange: ({ [string]: any }, { [string]: any }) => any,\n    definitionData?: { [string]: any },\n    definitionUi?: { [string]: any },\n  },\n) {\n  const { schema, uischema, onChange, definitionUi } = parameters;\n  const definedUi = (uischema || {}).definitions\n    ? { definitions: uischema.definitions }\n    : {};\n  const newUiSchema = ({\n    ...definedUi,\n    ...generateUiSchemaFromElementProps(elementArr, definitionUi),\n  }: { [string]: any });\n  const newSchema = ({\n    ...schema,\n    ...generateSchemaFromElementProps(elementArr),\n  }: { [string]: any });\n\n  // mandate that the type is an object if not already done\n  newSchema.type = 'object';\n\n  onChange(newSchema, newUiSchema);\n}\n\n// given an initial schema, update with a new card appended\nexport function addCardObj(parameters: {\n  schema: { [string]: any },\n  uischema: { [string]: any },\n  onChange: ({ [string]: any }, { [string]: any }) => any,\n  definitionData: { [string]: any },\n  definitionUi: { [string]: any },\n  index?: number,\n  categoryHash: { [string]: string },\n}) {\n  const {\n    schema,\n    uischema,\n    onChange,\n    definitionData,\n    definitionUi,\n    index,\n    categoryHash,\n  } = parameters;\n  const newElementObjArr = generateElementPropsFromSchemas({\n    schema,\n    uischema,\n    definitionData,\n    definitionUi,\n    categoryHash,\n  });\n\n  // ensure that each added block has a unique name\n\n  const names = newElementObjArr.map((element) => element.name);\n  const i =\n    names.length > 0\n      ? Math.max(\n          ...names.map((name) =>\n            name.startsWith('newInput')\n              ? Number.parseInt(name.charAt(8), 10)\n              : 0,\n          ),\n        ) + 1\n      : 1;\n\n  const newElement = ({\n    name: `newInput${i}`,\n    required: false,\n    dataOptions: {\n      title: `New Input ${i}`,\n      type: 'string',\n      default: '',\n    },\n    uiOptions: {},\n    propType: 'card',\n    schema: {},\n    uischema: {},\n    neighborNames: [],\n  }: ElementProps);\n\n  if (index !== undefined && index !== null) {\n    newElementObjArr.splice(index + 1, 0, newElement);\n  } else {\n    newElementObjArr.push(newElement);\n  }\n  updateSchemas(newElementObjArr, {\n    schema,\n    uischema,\n    definitionData,\n    definitionUi,\n    onChange,\n  });\n}\n\n// given an initial schema, update with a new section appended\nexport function addSectionObj(parameters: {\n  schema: { [string]: any },\n  uischema: { [string]: any },\n  onChange: ({ [string]: any }, { [string]: any }) => any,\n  definitionData: { [string]: any },\n  definitionUi: { [string]: any },\n  index?: number,\n  categoryHash: { [string]: string },\n}) {\n  const {\n    schema,\n    uischema,\n    onChange,\n    definitionData,\n    definitionUi,\n    index,\n    categoryHash,\n  } = parameters;\n  const newElementObjArr = generateElementPropsFromSchemas({\n    schema,\n    uischema,\n    definitionData,\n    definitionUi,\n    categoryHash,\n  });\n\n  // ensure that each added block has a unique name\n  const names = newElementObjArr.map((element) => element.name);\n  const i =\n    names.length > 0\n      ? Math.max(\n          ...names.map((name) =>\n            name.startsWith('newInput')\n              ? Number.parseInt(name.charAt(8), 10)\n              : 0,\n          ),\n        ) + 1\n      : 1;\n\n  const newElement = ({\n    name: `newInput${i}`,\n    required: false,\n    dataOptions: {\n      title: `New Input ${i}`,\n      type: 'object',\n      default: '',\n    },\n    uiOptions: {},\n    propType: 'section',\n    schema: { title: `New Input ${i}`, type: 'object' },\n    uischema: {},\n    neighborNames: [],\n  }: ElementProps);\n\n  if (index !== undefined && index !== null) {\n    newElementObjArr.splice(index + 1, 0, newElement);\n  } else {\n    newElementObjArr.push(newElement);\n  }\n  updateSchemas(newElementObjArr, {\n    schema,\n    uischema,\n    definitionData,\n    definitionUi,\n    onChange,\n  });\n}\n\n// generate an array of Card and Section components from a schema\nexport function generateElementComponentsFromSchemas(parameters: {\n  schemaData: { [string]: any },\n  uiSchemaData: { [string]: any },\n  onChange: ({ [string]: any }, { [string]: any }) => any,\n  definitionData?: { [string]: any },\n  definitionUi?: { [string]: any },\n  hideKey?: boolean,\n  path: string,\n  cardOpenArray: Array<boolean>,\n  setCardOpenArray: (newArr: Array<boolean>) => void,\n  allFormInputs: { [string]: FormInput },\n  mods?: Mods,\n  categoryHash: { [string]: string },\n  Card: React.AbstractComponent<{ [string]: any }>,\n  Section: React.AbstractComponent<{ [string]: any }>,\n}) {\n  const {\n    schemaData,\n    uiSchemaData,\n    onChange,\n    definitionData,\n    definitionUi,\n    hideKey,\n    path,\n    cardOpenArray,\n    setCardOpenArray,\n    allFormInputs,\n    mods,\n    categoryHash,\n    Card,\n    Section,\n  } = parameters;\n\n  const schema = parse(stringify(schemaData));\n  const uischema = parse(stringify(uiSchemaData));\n\n  if (!schema.properties) return [];\n  const elementPropArr = generateElementPropsFromSchemas({\n    schema,\n    uischema,\n    definitionData,\n    definitionUi,\n    categoryHash,\n  });\n\n  const elementList = elementPropArr.map<React.Node>((elementProp, index) => {\n    const expanded =\n      (cardOpenArray && index < cardOpenArray.length && cardOpenArray[index]) ||\n      false;\n    if (elementProp.propType === 'card') {\n      // choose the appropriate type specific parameters\n      const TypeSpecificParameters = getCardParameterInputComponentForType(\n        elementProp.dataOptions.category || 'string',\n        allFormInputs,\n      );\n\n      // add a fully defined card component to the list of components\n      return (\n        <Card\n          componentProps={{\n            name: elementPropArr[index].name,\n            required: elementPropArr[index].required,\n            hideKey,\n            path: `${path}_${elementPropArr[index].name}`,\n            definitionData,\n            definitionUi,\n            neighborNames: elementPropArr[index].neighborNames,\n            dependents: elementPropArr[index].dependents,\n            dependent: elementPropArr[index].dependent,\n            parent: elementPropArr[index].parent,\n            ...elementPropArr[index].uiOptions,\n            ...elementPropArr[index].dataOptions,\n          }}\n          key={`${path}_${elementPropArr[index].name}`}\n          TypeSpecificParameters={TypeSpecificParameters}\n          onChange={(newCardObj: { [string]: any }) => {\n            const newElementObjArr = generateElementPropsFromSchemas({\n              schema,\n              uischema,\n              definitionData,\n              definitionUi,\n              categoryHash,\n            });\n\n            // extract uiOptions and other properties\n            const newDataProps = {};\n            const newUiProps = {};\n            Object.keys(newCardObj).forEach((propName) => {\n              if (propName.startsWith('ui:')) {\n                if (propName.startsWith('ui:*')) {\n                  newUiProps[propName.substring(4)] = newCardObj[propName];\n                } else {\n                  newUiProps[propName] = newCardObj[propName];\n                }\n              } else if (\n                ![\n                  'name',\n                  'required',\n                  'neighborNames',\n                  'dependents',\n                  'dependent',\n                  'parent',\n                ].includes(propName)\n              ) {\n                newDataProps[propName] = newCardObj[propName];\n              }\n            });\n\n            if (newElementObjArr[index].propType === 'card') {\n              const oldElement = newElementObjArr[index];\n              newElementObjArr[index] = {\n                ...oldElement,\n                dataOptions: newDataProps,\n                uiOptions: newUiProps,\n                required: newCardObj.required,\n                dependents: newCardObj.dependents,\n                dependent: newCardObj.dependent,\n                parent: newCardObj.parent,\n                name: newCardObj.name,\n                $ref: newCardObj.$ref,\n                propType: 'card',\n              };\n            } else {\n              throw new Error('Card editing non card element');\n            }\n            updateSchemas(newElementObjArr, {\n              schema,\n              uischema,\n              definitionData,\n              definitionUi,\n              onChange,\n            });\n          }}\n          onDelete={() => {\n            // splice out this index from the card array\n            const newElementObjArr = generateElementPropsFromSchemas({\n              schema,\n              uischema,\n              definitionData,\n              definitionUi,\n              categoryHash,\n            });\n            newElementObjArr.splice(index, 1);\n            setCardOpenArray([\n              ...cardOpenArray.slice(0, index),\n              ...cardOpenArray.slice(index + 1),\n            ]);\n            updateSchemas(newElementObjArr, {\n              schema,\n              uischema,\n              definitionData,\n              definitionUi,\n              onChange,\n            });\n          }}\n          onMoveUp={() => {\n            const newElementObjArr = generateElementPropsFromSchemas({\n              schema,\n              uischema,\n              definitionData,\n              definitionUi,\n              categoryHash,\n            });\n            if (index === 0) return;\n\n            const tempBlock = newElementObjArr[index - 1];\n            newElementObjArr[index - 1] = newElementObjArr[index];\n            newElementObjArr[index] = tempBlock;\n            updateSchemas(newElementObjArr, {\n              schema,\n              uischema,\n              definitionData,\n              definitionUi,\n              onChange,\n            });\n          }}\n          onMoveDown={() => {\n            const newElementObjArr = generateElementPropsFromSchemas({\n              schema,\n              uischema,\n              definitionData,\n              definitionUi,\n              categoryHash,\n            });\n            if (index === elementPropArr.length - 1) return;\n\n            const tempBlock = newElementObjArr[index + 1];\n            newElementObjArr[index + 1] = newElementObjArr[index];\n            newElementObjArr[index] = tempBlock;\n            updateSchemas(newElementObjArr, {\n              schema,\n              uischema,\n              definitionData,\n              definitionUi,\n              onChange,\n            });\n          }}\n          addElem={(choice: string) => {\n            if (choice === 'card') {\n              addCardObj({\n                schema,\n                uischema,\n                onChange,\n                definitionData: definitionData || {},\n                definitionUi: definitionUi || {},\n                index,\n                categoryHash,\n              });\n            } else if (choice === 'section') {\n              addSectionObj({\n                schema,\n                uischema,\n                onChange,\n                definitionData: definitionData || {},\n                definitionUi: definitionUi || {},\n                index,\n                categoryHash,\n              });\n            }\n            setCardOpenArray([...cardOpenArray, false]);\n          }}\n          cardOpen={expanded}\n          setCardOpen={(newState: boolean) =>\n            setCardOpenArray([\n              ...cardOpenArray.slice(0, index),\n              newState,\n              ...cardOpenArray.slice(index + 1),\n            ])\n          }\n          allFormInputs={allFormInputs}\n          mods={mods}\n        />\n      );\n    } else if (elementProp.propType === 'section') {\n      // create a section with the appropriate schemas here\n      return (\n        <Section\n          schema={elementProp.schema}\n          uischema={elementProp.uischema}\n          onChange={(\n            newSchema: { [string]: any },\n            newUiSchema: { [string]: any },\n            newRef?: string,\n          ) => {\n            const newElementObjArr = generateElementPropsFromSchemas({\n              schema,\n              uischema,\n              definitionData,\n              definitionUi,\n              categoryHash,\n            });\n\n            const oldSection = newElementObjArr[index];\n\n            newElementObjArr[index] = {\n              ...oldSection,\n              schema: newSchema,\n              uischema: newUiSchema,\n              propType: 'section',\n            };\n\n            if (newRef) newElementObjArr[index].$ref = newRef;\n\n            updateSchemas(newElementObjArr, {\n              schema,\n              uischema,\n              definitionData,\n              definitionUi,\n              onChange,\n            });\n          }}\n          onNameChange={(newName: string) => {\n            const oldSection = elementProp;\n\n            // check if newName overlaps with an existing name\n            if (elementPropArr.map((elem) => elem.name).includes(newName))\n              return;\n\n            const newElementObjArr = generateElementPropsFromSchemas({\n              schema,\n              uischema,\n              definitionData,\n              definitionUi,\n              categoryHash,\n            });\n            newElementObjArr[index] = {\n              ...oldSection,\n              name: newName,\n            };\n            updateSchemas(newElementObjArr, {\n              schema,\n              uischema,\n              definitionData,\n              definitionUi,\n              onChange,\n            });\n          }}\n          onRequireToggle={() => {\n            const oldSection = elementProp;\n\n            const newElementObjArr = generateElementPropsFromSchemas({\n              schema,\n              uischema,\n              definitionData,\n              definitionUi,\n              categoryHash,\n            });\n            newElementObjArr[index] = {\n              ...oldSection,\n              required: !oldSection.required,\n            };\n            updateSchemas(newElementObjArr, {\n              schema,\n              uischema,\n              definitionData,\n              definitionUi,\n              onChange,\n            });\n          }}\n          onDependentsChange={(\n            newDependents: Array<{\n              children: Array<string>,\n              value?: any,\n            }>,\n          ) => {\n            const oldSection = elementProp;\n\n            const newElementObjArr = generateElementPropsFromSchemas({\n              schema,\n              uischema,\n              definitionData,\n              definitionUi,\n              categoryHash,\n            });\n            newElementObjArr[index] = {\n              ...oldSection,\n              dependents: newDependents,\n            };\n            updateSchemas(newElementObjArr, {\n              schema,\n              uischema,\n              onChange,\n              definitionData,\n              definitionUi,\n            });\n          }}\n          onDelete={() => {\n            // splice out this index from the card array\n            const newElementObjArr = generateElementPropsFromSchemas({\n              schema,\n              uischema,\n              definitionData,\n              definitionUi,\n              categoryHash,\n            });\n            newElementObjArr.splice(index, 1);\n            setCardOpenArray([\n              ...cardOpenArray.slice(0, index),\n              ...cardOpenArray.slice(index + 1),\n            ]);\n            updateSchemas(newElementObjArr, {\n              schema,\n              uischema,\n              definitionData,\n              definitionUi,\n              onChange,\n            });\n          }}\n          onMoveUp={() => {\n            const newElementObjArr = generateElementPropsFromSchemas({\n              schema,\n              uischema,\n              definitionData,\n              definitionUi,\n              categoryHash,\n            });\n            if (index === 0) return;\n\n            const tempBlock = newElementObjArr[index - 1];\n            newElementObjArr[index - 1] = newElementObjArr[index];\n            newElementObjArr[index] = tempBlock;\n            updateSchemas(newElementObjArr, {\n              schema,\n              uischema,\n              definitionData,\n              definitionUi,\n              onChange,\n            });\n          }}\n          onMoveDown={() => {\n            const newElementObjArr = generateElementPropsFromSchemas({\n              schema,\n              uischema,\n              definitionData,\n              definitionUi,\n              categoryHash,\n            });\n            if (index === elementPropArr.length - 1) return;\n\n            const tempBlock = newElementObjArr[index + 1];\n            newElementObjArr[index + 1] = newElementObjArr[index];\n            newElementObjArr[index] = tempBlock;\n            updateSchemas(newElementObjArr, {\n              schema,\n              uischema,\n              definitionData,\n              definitionUi,\n              onChange,\n            });\n          }}\n          name={elementProp.name}\n          key={`${path}_${elementPropArr[index].name}`}\n          required={elementProp.required}\n          path={`${path}_${elementProp.name}`}\n          definitionData={definitionData || {}}\n          definitionUi={definitionUi || {}}\n          hideKey={hideKey}\n          reference={elementProp.$ref}\n          neighborNames={elementProp.neighborNames}\n          dependents={elementProp.dependents}\n          dependent={elementProp.dependent}\n          parent={elementProp.parent}\n          addElem={(choice: string) => {\n            if (choice === 'card') {\n              addCardObj({\n                schema,\n                uischema,\n                onChange,\n                definitionData: definitionData || {},\n                definitionUi: definitionUi || {},\n                index,\n                categoryHash,\n              });\n            } else if (choice === 'section') {\n              addSectionObj({\n                schema,\n                uischema,\n                onChange,\n                definitionData: definitionData || {},\n                definitionUi: definitionUi || {},\n                index,\n                categoryHash,\n              });\n            }\n            setCardOpenArray([...cardOpenArray, false]);\n          }}\n          cardOpen={expanded}\n          setCardOpen={(newState: boolean) =>\n            setCardOpenArray([\n              ...cardOpenArray.slice(0, index),\n              newState,\n              ...cardOpenArray.slice(index + 1),\n            ])\n          }\n          allFormInputs={allFormInputs}\n          categoryHash={categoryHash}\n        />\n      );\n    } else {\n      return (\n        <div>\n          <h2> Error parsing element </h2>\n        </div>\n      );\n    }\n  });\n\n  return elementList;\n}\n\n// function called when drag and drop ends\nexport function onDragEnd(\n  result: any,\n  details: {\n    schema: { [string]: any },\n    uischema: { [string]: any },\n    onChange: ({ [string]: any }, { [string]: any }) => any,\n    definitionData?: { [string]: any },\n    definitionUi?: { [string]: any },\n    categoryHash: { [string]: string },\n  },\n) {\n  const {\n    schema,\n    uischema,\n    onChange,\n    definitionData,\n    definitionUi,\n    categoryHash,\n  } = details;\n  const src = result.source.index;\n  const dest = result.destination.index;\n  const newElementObjArr = generateElementPropsFromSchemas({\n    schema,\n    uischema,\n    definitionData,\n    definitionUi,\n    categoryHash,\n  });\n\n  const tempBlock = newElementObjArr[src];\n  newElementObjArr[src] = newElementObjArr[dest];\n  newElementObjArr[dest] = tempBlock;\n\n  updateSchemas(newElementObjArr, {\n    schema,\n    uischema,\n    definitionData: definitionData || {},\n    definitionUi: definitionUi || {},\n    onChange,\n  });\n}\n\n// helper function to recursively update sections\nfunction propagateElementChange(\n  elementArr: Array<ElementProps>,\n  definitionData: { [string]: any },\n  definitionUi: { [string]: any },\n  categoryHash: { [string]: string },\n) {\n  const updatedElementArr = [];\n  elementArr.forEach((element) => {\n    // update section and it's children\n    if (element.propType === 'section') {\n      const childrenElements = generateElementPropsFromSchemas({\n        schema: element.schema,\n        uischema: element.uischema,\n        definitionData,\n        definitionUi,\n        categoryHash,\n      });\n      const updatedChildren = propagateElementChange(\n        childrenElements,\n        definitionData,\n        definitionUi,\n        categoryHash,\n      );\n      const newUiSchema = {\n        ...element.uischema,\n        ...generateUiSchemaFromElementProps(updatedChildren, definitionUi),\n      };\n      const newSchema = {\n        ...element.schema,\n        ...generateSchemaFromElementProps(updatedChildren),\n      };\n      const newElement = {\n        ...element,\n        schema: newSchema,\n        uischema: newUiSchema,\n      };\n      updatedElementArr.push(newElement);\n    } else {\n      updatedElementArr.push(element);\n    }\n  });\n  return updatedElementArr;\n}\n\n// propogate changes in a schema and ui schema with updated definitions but outdated body componenents\nexport function propagateDefinitionChanges(\n  schema: { [string]: any },\n  uischema: { [string]: any },\n  onChange: ({ [string]: any }, { [string]: any }) => void,\n  categoryHash: { [string]: string },\n) {\n  const definitionData = schema.definitions;\n  const definitionUi = uischema.definitions;\n  const bodyElements = generateElementPropsFromSchemas({\n    schema,\n    uischema,\n    definitionData,\n    definitionUi,\n    categoryHash,\n  });\n  const updatedBodyElements = propagateElementChange(\n    bodyElements,\n    definitionData,\n    definitionUi,\n    categoryHash,\n  );\n\n  updateSchemas(updatedBodyElements, {\n    schema,\n    uischema,\n    definitionData,\n    definitionUi,\n    onChange,\n  });\n}\n","// @flow\n\nimport * as React from 'react';\nimport { Input } from 'reactstrap';\nimport CardEnumOptions from '../CardEnumOptions';\nimport CardSelector from './CardSelector';\nimport FBCheckbox from '../checkbox/FBCheckbox';\nimport { parse } from '../utils';\n\n// handle value options for different card types\nexport default function ValueSelector({\n  possibility,\n  onChange,\n  parentEnums,\n  parentType,\n  parentName,\n  parentSchema,\n  path,\n}: {\n  possibility: {\n    children: Array<string>,\n    value: any,\n  },\n  onChange: (newPossibility: {\n    children: Array<string>,\n    value?: any,\n  }) => void,\n  parentEnums?: Array<string | number>,\n  parentType?: string,\n  parentName?: string,\n  parentSchema?: string,\n  path: string,\n}) {\n  if (possibility.value) {\n    // enum type\n    if (parentEnums) {\n      const enumType = typeof parentEnums[0] === 'number' ? 'number' : 'string';\n      if (enumType === 'string')\n        return (\n          <CardSelector\n            possibleChoices={parentEnums.map((val) => `${val}`)}\n            chosenChoices={possibility.value.enum}\n            onChange={(chosenChoices: Array<string>) =>\n              onChange({ ...possibility, value: { enum: chosenChoices } })\n            }\n            placeholder='Allowed value'\n            path={path}\n          />\n        );\n      if (enumType === 'number')\n        return (\n          <CardSelector\n            possibleChoices={parentEnums.map((val) => `${val}`)}\n            chosenChoices={possibility.value.enum}\n            onChange={(chosenChoices: Array<string>) =>\n              onChange({\n                ...possibility,\n                value: {\n                  enum: chosenChoices.map((val) => Number.parseFloat(val)),\n                },\n              })\n            }\n            placeholder='Allowed value'\n            path={path}\n          />\n        );\n    }\n    // check box type\n    if (parentType === 'boolean') {\n      return (\n        <FBCheckbox\n          onChangeValue={() => {\n            if (possibility.value.enum && possibility.value.enum[0]) {\n              onChange({\n                ...possibility,\n                value: { enum: [false] },\n              });\n            } else {\n              onChange({\n                ...possibility,\n                value: { enum: [true] },\n              });\n            }\n          }}\n          isChecked={possibility.value.enum && possibility.value.enum[0]}\n          label={parentName}\n        />\n      );\n    }\n    // object type\n    if (parentType === 'object') {\n      const enumArr = (possibility.value.enum: Array<any>);\n\n      return (\n        <div>\n          {enumArr.map((combination, index) => (\n            <li key={`${path}_possibleValue${index}`}>\n              {Object.keys(combination).map((key) => {\n                const val = combination[key];\n                return (\n                  <div key={key}>\n                    <h5>{key}:</h5>\n                    {\n                      {\n                        string: (\n                          <Input\n                            value={val || ''}\n                            placeholder='String value'\n                            type='string'\n                            onChange={(ev: any) => {\n                              const newVal = ev.target.value;\n                              const oldCombo = possibility.value.enum[index];\n                              onChange({\n                                ...possibility,\n                                value: {\n                                  enum: [\n                                    ...enumArr.slice(0, index),\n                                    { ...oldCombo, [key]: newVal },\n                                    ...enumArr.slice(index + 1),\n                                  ],\n                                },\n                              });\n                            }}\n                            className='card-modal-text'\n                          />\n                        ),\n                        number: (\n                          <Input\n                            value={val || ''}\n                            placeholder='Number value'\n                            type='number'\n                            onChange={(ev: any) => {\n                              const newVal = Number.parseFloat(ev.target.value);\n                              const oldCombo = possibility.value.enum[index];\n                              onChange({\n                                ...possibility,\n                                value: {\n                                  enum: [\n                                    ...enumArr.slice(0, index),\n                                    { ...oldCombo, [key]: newVal },\n                                    ...enumArr.slice(index + 1),\n                                  ],\n                                },\n                              });\n                            }}\n                            className='card-modal-number'\n                          />\n                        ),\n                        array: (\n                          <Input\n                            value={JSON.stringify(val) || ''}\n                            placeholder='Array in JSON'\n                            type='string'\n                            onChange={(ev: any) => {\n                              let newVal = val;\n                              try {\n                                newVal = JSON.parse(ev.target.value);\n                              } catch (error) {\n                                // eslint-disable-next-line no-console\n                                console.error('invalid JSON array input');\n                              }\n                              const oldCombo = possibility.value.enum[index];\n                              onChange({\n                                ...possibility,\n                                value: {\n                                  enum: [\n                                    ...enumArr.slice(0, index),\n                                    { ...oldCombo, [key]: newVal },\n                                    ...enumArr.slice(index + 1),\n                                  ],\n                                },\n                              });\n                            }}\n                            className='card-modal-text'\n                          />\n                        ),\n                        object: (\n                          <Input\n                            value={JSON.stringify(val) || ''}\n                            placeholder='Object in JSON'\n                            type='string'\n                            onChange={(ev: any) => {\n                              let newVal = val;\n                              try {\n                                newVal = JSON.parse(ev.target.value);\n                              } catch (error) {\n                                // eslint-disable-next-line no-console\n                                console.error('invalid JSON object input');\n                              }\n                              const oldCombo = possibility.value.enum[index];\n                              onChange({\n                                ...possibility,\n                                value: {\n                                  enum: [\n                                    ...enumArr.slice(0, index),\n                                    { ...oldCombo, [key]: newVal },\n                                    ...enumArr.slice(index + 1),\n                                  ],\n                                },\n                              });\n                            }}\n                            className='card-modal-text'\n                          />\n                        ),\n                      }[typeof val]\n                    }\n                  </div>\n                );\n              })}\n              <i\n                className='fa fa-times'\n                onClick={() =>\n                  onChange({\n                    ...possibility,\n                    value: {\n                      enum: [\n                        ...enumArr.slice(0, index),\n                        ...enumArr.slice(index + 1),\n                      ],\n                    },\n                  })\n                }\n              />\n            </li>\n          ))}\n          <i\n            className='fa fa-plus'\n            onClick={() => {\n              const newCase = {};\n              const propArr = parentSchema\n                ? (parse(parentSchema): any).properties\n                : {};\n              Object.keys(propArr).forEach((key) => {\n                if (\n                  propArr[key].type === 'number' ||\n                  propArr[key].type === 'integer'\n                ) {\n                  newCase[key] = 0;\n                } else if (propArr[key].type === 'array' || propArr[key].enum) {\n                  newCase[key] = [];\n                } else if (\n                  propArr[key].type === 'object' ||\n                  propArr[key].properties\n                ) {\n                  newCase[key] = {};\n                } else {\n                  newCase[key] = '';\n                }\n              });\n              onChange({\n                ...possibility,\n                value: { enum: [...enumArr, newCase] },\n              });\n            }}\n          />\n        </div>\n      );\n    }\n    return (\n      <CardEnumOptions\n        initialValues={possibility.value.enum}\n        onChange={(newEnum: Array<any>) =>\n          onChange({ ...possibility, value: { enum: newEnum } })\n        }\n        type={parentType || 'string'}\n        showNames={false}\n      />\n    );\n  } else {\n    return <h5> Appear if defined </h5>;\n  }\n}\n","// @flow\n\nimport * as React from 'react';\nimport Tooltip from '../Tooltip';\nimport CardSelector from './CardSelector';\nimport ValueSelector from './ValueSelector';\n\n// a possible dependency\nexport default function DependencyPossibility({\n  possibility,\n  neighborNames,\n  path,\n  onChange,\n  onDelete,\n  parentEnums,\n  parentType,\n  parentName,\n  parentSchema,\n}: {\n  possibility: {\n    children: Array<string>,\n    value?: any,\n  },\n  neighborNames: Array<string>,\n  path: string,\n  onChange: (newPossibility: {\n    children: Array<string>,\n    value?: any,\n  }) => void,\n  onDelete: () => void,\n  parentEnums?: Array<string | number>,\n  parentType?: string,\n  parentName?: string,\n  parentSchema?: string,\n}) {\n  return (\n    <div className='form-dependency-condition'>\n      <h5>\n        Display the following:{' '}\n        <Tooltip\n          id={`${path}_bulk`}\n          type='help'\n          text='Choose the other form elements that depend on this one'\n        />\n      </h5>\n      <CardSelector\n        possibleChoices={\n          neighborNames.filter((name) => name !== parentName) || []\n        }\n        chosenChoices={possibility.children}\n        onChange={(chosenChoices: Array<string>) =>\n          onChange({ ...possibility, children: [...chosenChoices] })\n        }\n        placeholder='Choose a dependent...'\n        path={path}\n      />\n      <h5>\n        If \"{parentName}\" has {possibility.value ? 'the value:' : 'a value.'}\n      </h5>\n      <div style={{ display: possibility.value ? 'initial' : 'none' }}>\n        <br />\n        <ValueSelector\n          possibility={possibility}\n          onChange={(newPossibility: {\n            children: Array<string>,\n            value?: any,\n          }) => onChange(newPossibility)}\n          parentEnums={parentEnums}\n          parentType={parentType}\n          parentName={parentName}\n          parentSchema={parentSchema}\n          path={path}\n        />\n      </div>\n      <br />\n      <i className='fa fa-times' onClick={() => onDelete()} />\n    </div>\n  );\n}\n","// @flow\n\nimport * as React from 'react';\nimport { UncontrolledTooltip } from 'reactstrap';\nimport { createUseStyles } from 'react-jss';\nimport FBRadioGroup from '../radio/FBRadioGroup';\nimport Tooltip from '../Tooltip';\nimport DependencyWarning from './DependencyWarning';\nimport DependencyPossibility from './DependencyPossibility';\n\nconst useStyles = createUseStyles({\n  dependencyField: {\n    '& i': { cursor: 'pointer' },\n    '& .fa-plus': { marginLeft: '1em' },\n    '& h5': { fontSize: '1em' },\n    '& .form-dependency-select': { fontSize: '0.75em', marginBottom: '1em' },\n    '& .form-dependency-conditions': {\n      textAlign: 'left',\n      '& .form-dependency-condition': {\n        padding: '1em',\n        border: '1px solid gray',\n        borderRadius: '4px',\n        margin: '1em',\n        '& *': { textAlign: 'initial' },\n        '& .card-enum-option': {\n          display: 'flex',\n          flexDirection: 'row',\n          '& input': {\n            width: '80%',\n            marginRight: '1em',\n            marginBottom: '0.5em',\n          },\n        },\n      },\n    },\n    '& p': { fontSize: '0.75em' },\n    '& .fb-radio-button': {\n      display: 'block',\n    },\n  },\n});\n\n// checks whether an array corresponds to oneOf dependencies\nfunction checkIfValueBasedDependency(\n  dependents: Array<{\n    children: Array<string>,\n    value?: any,\n  }>,\n) {\n  let valueBased = true;\n  if (dependents && Array.isArray(dependents) && dependents.length > 0) {\n    dependents.forEach((possibility) => {\n      if (!possibility.value || !possibility.value.enum) {\n        valueBased = false;\n      }\n    });\n  } else {\n    valueBased = false;\n  }\n\n  return valueBased;\n}\n\ntype DependencyParams = {\n  [string]: any,\n  name?: string,\n  dependents?: Array<{\n    children: Array<string>,\n    value?: any,\n  }>,\n  type?: string,\n  enum?: Array<string | number>,\n  neighborNames?: Array<string>,\n  schema?: string,\n};\n\nexport default function DependencyField({\n  parameters,\n  onChange,\n}: {\n  parameters: DependencyParams,\n  onChange: (newParams: DependencyParams) => void,\n}) {\n  const classes = useStyles();\n  const valueBased = checkIfValueBasedDependency(parameters.dependents || []);\n  return (\n    <div className={`form-dependency ${classes.dependencyField}`}>\n      <h3>\n        Dependencies{' '}\n        <Tooltip\n          id={`${parameters.path}_dependent`}\n          type='help'\n          text='Control whether other form elements show based on this one'\n        />\n      </h3>\n      {!!parameters.dependents && parameters.dependents.length > 0 && (\n        <React.Fragment>\n          <FBRadioGroup\n            defaultValue={valueBased ? 'value' : 'definition'}\n            horizontal={false}\n            options={[\n              {\n                value: 'definition',\n                label: 'Any value dependency',\n              },\n              {\n                value: 'value',\n                label: 'Specific value dependency',\n              },\n            ]}\n            onChange={(selection) => {\n              if (parameters.dependents) {\n                const newDependents = [...parameters.dependents];\n                if (selection === 'definition') {\n                  parameters.dependents.forEach((possibility, index) => {\n                    newDependents[index] = {\n                      ...possibility,\n                      value: undefined,\n                    };\n                  });\n                } else {\n                  parameters.dependents.forEach((possibility, index) => {\n                    newDependents[index] = {\n                      ...possibility,\n                      value: { enum: [] },\n                    };\n                  });\n                }\n                onChange({\n                  ...parameters,\n                  dependents: newDependents,\n                });\n              }\n            }}\n          />\n          <Tooltip\n            id={`${parameters.path}_valuebased`}\n            type='help'\n            text=\"Specify whether these elements should show based on this element's value\"\n          />{' '}\n        </React.Fragment>\n      )}\n      <DependencyWarning parameters={parameters} />\n      <div className='form-dependency-conditions'>\n        {parameters.dependents\n          ? parameters.dependents.map((possibility, index) => (\n              <DependencyPossibility\n                possibility={possibility}\n                neighborNames={parameters.neighborNames || []}\n                parentEnums={parameters.enum}\n                parentType={parameters.type}\n                parentName={parameters.name}\n                parentSchema={parameters.schema}\n                path={parameters.path}\n                key={`${parameters.path}_possibility${index}`}\n                onChange={(newPossibility: {\n                  children: Array<string>,\n                  value?: any,\n                }) => {\n                  const newDependents = parameters.dependents\n                    ? [...parameters.dependents]\n                    : [];\n                  newDependents[index] = newPossibility;\n                  onChange({\n                    ...parameters,\n                    dependents: newDependents,\n                  });\n                }}\n                onDelete={() => {\n                  const newDependents = parameters.dependents\n                    ? [...parameters.dependents]\n                    : [];\n                  onChange({\n                    ...parameters,\n                    dependents: [\n                      ...newDependents.slice(0, index),\n                      ...newDependents.slice(index + 1),\n                    ],\n                  });\n                }}\n              />\n            ))\n          : ''}\n\n        <i\n          className='fa fa-plus'\n          id={`${parameters.path}_adddependency`}\n          onClick={() => {\n            const newDependents = parameters.dependents\n              ? [...parameters.dependents]\n              : [];\n            newDependents.push({\n              children: [],\n              value: valueBased ? { enum: [] } : undefined,\n            });\n            onChange({\n              ...parameters,\n              dependents: newDependents,\n            });\n          }}\n        />\n        <UncontrolledTooltip\n          placement='top'\n          target={`${parameters.path}_adddependency`}\n        >\n          Add another dependency relation linking this element and other form\n          elements\n        </UncontrolledTooltip>\n      </div>\n    </div>\n  );\n}\n","// @flow\n\nimport * as React from 'react';\nimport { Modal, ModalHeader, Button, ModalBody, ModalFooter } from 'reactstrap';\nimport { createUseStyles } from 'react-jss';\nimport DependencyField from './dependencies/DependencyField';\nimport type { Parameters } from './types';\n\nconst useStyles = createUseStyles({\n  cardModal: {\n    '& .card-modal-entries': { padding: '1em' },\n    '& h4, h5, p, label, li': { fontSize: '14px', marginBottom: '0' },\n    '& h3': { fontSize: '16px' },\n    '& > input': { marginBottom: '1em', height: '32px' },\n    '& .fa-question-circle': { color: 'var(--gray)' },\n    '& .card-modal-boolean': {\n      '& *': { marginRight: '0.25em', height: 'auto', display: 'inline-block' },\n    },\n    '& .card-modal-select': {\n      '& input': { margin: '0', height: '20px' },\n      marginBottom: '1em',\n    },\n  },\n});\n\nexport default function CardModal({\n  componentProps,\n  onChange,\n  isOpen,\n  onClose,\n  TypeSpecificParameters,\n}: {\n  componentProps: {\n    [string]: any,\n  },\n  onChange: (any) => void,\n  isOpen: boolean,\n  onClose: () => void,\n  TypeSpecificParameters: React.AbstractComponent<{\n    parameters: Parameters,\n    onChange: (newParams: Parameters) => void,\n  }>,\n}) {\n  const classes = useStyles();\n  // assign state values for parameters that should only change on hitting \"Save\"\n  const [componentPropsState, setComponentProps] = React.useState(\n    componentProps,\n  );\n\n  React.useEffect(() => {\n    setComponentProps(componentProps);\n  }, [componentProps]);\n\n  return (\n    <Modal isOpen={isOpen} data-test='card-modal' className={classes.cardModal}>\n      <ModalHeader className='card-modal-header'>\n        <div style={{ display: componentProps.hideKey ? 'none' : 'initial' }}>\n          <h5>Additional Settings</h5>\n        </div>\n      </ModalHeader>\n      <ModalBody className='card-modal-entries'>\n        <TypeSpecificParameters\n          parameters={componentPropsState}\n          onChange={(newState: any) => {\n            setComponentProps({\n              ...componentPropsState,\n              ...newState,\n            });\n          }}\n        />\n        <DependencyField\n          parameters={(componentPropsState: { [string]: any })}\n          onChange={(newState: any) => {\n            setComponentProps({\n              ...componentPropsState,\n              ...newState,\n            });\n          }}\n        />\n      </ModalBody>\n      <ModalFooter>\n        <Button\n          onClick={() => {\n            onClose();\n            onChange(componentPropsState);\n          }}\n          color='primary'\n        >\n          Save\n        </Button>\n        <Button\n          onClick={() => {\n            onClose();\n          }}\n          color='secondary'\n        >\n          Cancel\n        </Button>\n      </ModalFooter>\n    </Modal>\n  );\n}\n","// @flow\n\nimport * as React from 'react';\nimport { getCardBody } from './utils';\nimport type { Parameters, Mods, FormInput } from './types';\n\n// specify the inputs required for any type of object\nexport default function GeneralParameterInputs({\n  category,\n  parameters,\n  onChange,\n  mods,\n  allFormInputs,\n}: {\n  category: string,\n  parameters: Parameters,\n  onChange: (newParams: Parameters) => void,\n  mods?: Mods,\n  allFormInputs: { [string]: FormInput },\n}) {\n  const CardBody = getCardBody(category, allFormInputs);\n  return (\n    <div>\n      <CardBody parameters={parameters} onChange={onChange} mods={mods || {}} />\n    </div>\n  );\n}\n","// @flow\n\nimport React from 'react';\nimport Select from 'react-select';\nimport { Input } from 'reactstrap';\nimport GeneralParameterInputs from './GeneralParameterInputs';\nimport {\n  defaultUiProps,\n  defaultDataProps,\n  categoryToNameMap,\n  categoryType,\n} from './utils';\nimport type { Parameters, Mods, FormInput } from './types';\nimport Tooltip from './Tooltip';\n\n// specify the inputs required for any type of object\nexport default function CardGeneralParameterInputs({\n  parameters,\n  onChange,\n  allFormInputs,\n  mods,\n}: {\n  parameters: Parameters,\n  onChange: (newParams: Parameters) => void,\n  mods?: Mods,\n  allFormInputs: { [string]: FormInput },\n}) {\n  const [keyState, setKeyState] = React.useState(parameters.name);\n  const [titleState, setTitleState] = React.useState(parameters.title);\n  const [descriptionState, setDescriptionState] = React.useState(\n    parameters.description,\n  );\n  const categoryMap = categoryToNameMap(parameters.category, allFormInputs);\n\n  return (\n    <div>\n      <div className='card-entry'>\n        <h5>\n          Object Name{' '}\n          <Tooltip\n            text={\n              mods &&\n              mods.tooltipDescriptions &&\n              typeof mods.tooltipDescriptions.cardObjectName === 'string'\n                ? mods.tooltipDescriptions.cardObjectName\n                : 'The back-end name of the object'\n            }\n            id={`${(keyState: string)}_nameinfo`}\n            type='help'\n          />\n        </h5>\n\n        <Input\n          value={keyState || ''}\n          placeholder='Key'\n          type='text'\n          onChange={(ev: SyntheticInputEvent<HTMLInputElement>) =>\n            setKeyState(ev.target.value.replace(/\\W/g, '_'))\n          }\n          onBlur={(ev: SyntheticInputEvent<HTMLInputElement>) =>\n            onChange({\n              ...parameters,\n              name: ev.target.value,\n            })\n          }\n          className='card-text'\n        />\n      </div>\n      <div\n        className={`card-entry ${\n          parameters.$ref === undefined ? '' : 'disabled-input'\n        }`}\n      >\n        <h5>\n          Display Name{' '}\n          <Tooltip\n            text={\n              mods &&\n              mods.tooltipDescriptions &&\n              typeof mods.tooltipDescriptions.cardDisplayName === 'string'\n                ? mods.tooltipDescriptions.cardDisplayName\n                : 'The user-facing name of this object'\n            }\n            id={`${(keyState: string)}-titleinfo`}\n            type='help'\n          />\n        </h5>\n        <Input\n          value={titleState || ''}\n          placeholder='Title'\n          type='text'\n          onChange={(ev: SyntheticInputEvent<HTMLInputElement>) =>\n            setTitleState(ev.target.value)\n          }\n          onBlur={(ev: SyntheticInputEvent<HTMLInputElement>) => {\n            onChange({ ...parameters, title: ev.target.value });\n          }}\n          className='card-text'\n          readOnly={parameters.$ref !== undefined}\n        />\n      </div>\n      <div className={`card-entry ${parameters.$ref ? 'disabled-input' : ''}`}>\n        <h5>\n          Description{' '}\n          <Tooltip\n            text={\n              mods &&\n              mods.tooltipDescriptions &&\n              typeof mods.tooltipDescriptions.cardDescription === 'string'\n                ? mods.tooltipDescriptions.cardDescription\n                : 'This will appear as help text on the form'\n            }\n            id={`${(keyState: string)}-descriptioninfo`}\n            type='help'\n          />\n        </h5>\n        <Input\n          value={descriptionState || ''}\n          placeholder='Description'\n          type='text'\n          onChange={(ev: SyntheticInputEvent<HTMLInputElement>) =>\n            setDescriptionState(ev.target.value)\n          }\n          onBlur={(ev: SyntheticInputEvent<HTMLInputElement>) => {\n            onChange({ ...parameters, description: ev.target.value });\n          }}\n          className='card-text'\n          readOnly={parameters.$ref !== undefined}\n        />\n      </div>\n      <div className='card-entry'>\n        <h5>\n          Input Type{' '}\n          <Tooltip\n            text={\n              mods &&\n              mods.tooltipDescriptions &&\n              typeof mods.tooltipDescriptions.cardInputType === 'string'\n                ? mods.tooltipDescriptions.cardInputType\n                : 'The type of form input displayed on the form'\n            }\n            id={`${(keyState: string)}-inputinfo`}\n            type='help'\n          />\n        </h5>\n        <Select\n          value={{\n            value: parameters.category,\n            label: categoryMap[parameters.category],\n          }}\n          placeholder='Category'\n          options={Object.keys(categoryMap)\n            .filter(\n              (key) =>\n                key !== 'ref' ||\n                (parameters.definitionData &&\n                  Object.keys(parameters.definitionData).length !== 0),\n            )\n            .map((key) => ({\n              value: key,\n              label: categoryMap[key],\n            }))}\n          onChange={(val: any) => {\n            // figure out the new 'type'\n            const newCategory = val.value;\n\n            const newProps = {\n              ...defaultUiProps(newCategory, allFormInputs),\n              ...defaultDataProps(newCategory, allFormInputs),\n              name: parameters.name,\n              required: parameters.required,\n            };\n            if (newProps.$ref !== undefined && !newProps.$ref) {\n              // assign an initial reference\n              const firstDefinition = Object.keys(parameters.definitionData)[0];\n              newProps.$ref = `#/definitions/${firstDefinition || 'empty'}`;\n            }\n            onChange({\n              ...newProps,\n              title: newProps.title || parameters.title,\n              default: newProps.default || '',\n              type: newProps.type || categoryType(newCategory, allFormInputs),\n              category: newProps.category || newCategory,\n            });\n          }}\n          className='card-select'\n        />\n      </div>\n      <div className='card-category-options'>\n        <GeneralParameterInputs\n          category={parameters.category}\n          parameters={parameters}\n          onChange={onChange}\n          mods={mods}\n          allFormInputs={allFormInputs}\n        />\n      </div>\n    </div>\n  );\n}\n","// @flow\n\nimport React, { useState } from 'react';\nimport {\n  Popover,\n  PopoverHeader,\n  PopoverBody,\n  UncontrolledTooltip,\n  Button,\n} from 'reactstrap';\nimport { createUseStyles } from 'react-jss';\nimport FBRadioGroup from './radio/FBRadioGroup';\n\nconst useStyles = createUseStyles({\n  addDetails: {\n    '& .popover': {\n      width: '300px',\n      'z-index': '1051 !important',\n      '& .popover-inner': {\n        border: '1px solid #1d71ad',\n        borderRadius: '4px',\n        '& .popover-header': { borderBottom: '1px solid #1d71ad' },\n        '& .popover-body': {\n          '& .fb-radio-group': { display: 'block' },\n          '& div': { margin: '0', display: 'inline-block', width: '50%' },\n          '& .left': { textAlign: 'left' },\n          '& .right': { textAlign: 'right' },\n        },\n      },\n    },\n  },\n});\n\nexport default function Add({\n  name,\n  addElem,\n  hidden,\n}: {\n  name: string,\n  addElem: (choice: string) => void,\n  hidden?: boolean,\n}) {\n  const classes = useStyles();\n  const [popoverOpen, setPopoverOpen] = useState(false);\n  const [createChoice, setCreateChoice] = useState('card');\n\n  return (\n    <div style={{ display: hidden ? 'none' : 'initial' }}>\n      <i\n        className='fa fa-plus-square card-add'\n        onClick={() => setPopoverOpen(true)}\n        id={`${name}_add`}\n      />\n      <UncontrolledTooltip placement='top' target={`${name}_add`}>\n        Create new form element\n      </UncontrolledTooltip>\n      <Popover\n        placement='bottom'\n        target={`${name}_add`}\n        isOpen={popoverOpen}\n        toggle={() => setPopoverOpen(false)}\n        className={`add-details ${classes.addDetails}`}\n        id={`${name}_add_popover`}\n      >\n        <PopoverHeader>Create New</PopoverHeader>\n        <PopoverBody>\n          <FBRadioGroup\n            className='choose-create'\n            defaultValue={createChoice}\n            horizontal={false}\n            options={[\n              {\n                value: 'card',\n                label: 'Form element',\n              },\n              {\n                value: 'section',\n                label: 'Form section',\n              },\n            ]}\n            onChange={(selection) => {\n              setCreateChoice(selection);\n            }}\n          />\n          <div className='left'>\n            <Button onClick={() => setPopoverOpen(false)} color='secondary'>\n              Cancel\n            </Button>\n          </div>\n          <div className='right'>\n            <Button\n              onClick={() => {\n                addElem(createChoice);\n                setPopoverOpen(false);\n              }}\n              color='primary'\n            >\n              Create\n            </Button>\n          </div>\n        </PopoverBody>\n      </Popover>\n    </div>\n  );\n}\n","// @flow\n\nimport * as React from 'react';\nimport { UncontrolledTooltip } from 'reactstrap';\nimport { createUseStyles } from 'react-jss';\nimport FBCheckbox from './checkbox/FBCheckbox';\nimport Collapse from './Collapse/Collapse';\nimport CardModal from './CardModal';\nimport CardGeneralParameterInputs from './CardGeneralParameterInputs';\nimport Add from './Add';\nimport Tooltip from './Tooltip';\nimport type { Parameters, Mods, FormInput } from './types';\n\nconst useStyles = createUseStyles({\n  cardEntries: {\n    'border-bottom': '1px solid gray',\n    margin: '.5em 1.5em 0 1.5em',\n    '& h5': {\n      color: 'black',\n      'font-size': '14px',\n      'font-weight': 'bold',\n      margin: 0,\n    },\n    '& .card-entry': {\n      display: 'inline-block',\n      margin: 0,\n      width: '50%',\n      'text-align': 'left',\n      padding: '0.5em',\n    },\n    '& input': {\n      border: '1px solid gray',\n      'border-radius': '4px',\n    },\n    '& .card-category-options': {\n      padding: '.5em',\n    },\n    '& .card-select': {\n      border: '1px solid var(--gray)',\n      'border-radius': '4px',\n    },\n    '& .card-array': {\n      '& .fa-plus-square': { display: 'none' },\n      '& .section-entries': { '& .fa-plus-square': { display: 'initial' } },\n    },\n    '& .card-enum': {\n      display: 'flex',\n      flexDirection: 'column',\n      width: '100%',\n      backgroundColor: 'var(--light-gray)',\n      textAlign: 'left',\n      padding: '1em',\n      '& h3': { fontSize: '16px', margin: '0' },\n      '& label': { color: 'black', fontSize: '14px' },\n      '& .card-enum-header': {\n        marginTop: '0.5em',\n        width: '100%',\n        display: 'flex',\n        flexDirection: 'row',\n        '& h5': { width: '50%', fontWeight: 'bold', fontSize: '14px' },\n      },\n      '& i': { cursor: 'pointer' },\n      '& .card-enum-option': {\n        width: '100%',\n        display: 'flex',\n        flexDirection: 'row',\n        '& input': { width: '80%', marginRight: '1em', marginBottom: '0.5em' },\n      },\n    },\n  },\n  cardInteractions: {\n    margin: '.5em 1.5em',\n    textAlign: 'left',\n    '& .fa': { marginRight: '1em', borderRadius: '4px', padding: '.25em' },\n    '& .fa-arrow-up, .fa-arrow-down': { marginRight: '.5em' },\n    '& .fa-trash': { border: '1px solid #DE5354', color: '#DE5354' },\n    '& .fb-checkbox': { display: 'inline-block' },\n    '& .interactions-left, & .interactions-right': {\n      display: 'inline-block',\n      width: '48%',\n      margin: '0 auto',\n    },\n    '& .interactions-left': { textAlign: 'left' },\n    '& .interactions-right': { textAlign: 'right' },\n  },\n});\n\nexport default function Card({\n  componentProps,\n  onChange,\n  onDelete,\n  onMoveUp,\n  onMoveDown,\n  TypeSpecificParameters,\n  addElem,\n  cardOpen,\n  setCardOpen,\n  allFormInputs,\n  mods,\n}: {\n  componentProps: {\n    [string]: string | number | boolean | Array<string | number>,\n    path: string,\n  },\n  onChange: ({ [string]: any }) => void,\n  onDelete?: () => void,\n  onMoveUp?: () => void,\n  onMoveDown?: () => void,\n  TypeSpecificParameters: React.AbstractComponent<{\n    parameters: Parameters,\n    onChange: (newParams: Parameters) => void,\n  }>,\n  addElem?: (choice: string) => void,\n  cardOpen: boolean,\n  setCardOpen: (newState: boolean) => void,\n  mods?: Mods,\n  allFormInputs: { [string]: FormInput },\n}) {\n  const classes = useStyles();\n  const [modalOpen, setModalOpen] = React.useState(false);\n\n  return (\n    <React.Fragment>\n      <Collapse\n        isOpen={cardOpen}\n        toggleCollapse={() => setCardOpen(!cardOpen)}\n        title={\n          <React.Fragment>\n            <span onClick={() => setCardOpen(!cardOpen)} className='label'>\n              {componentProps.title || componentProps.name}{' '}\n              {componentProps.parent ? (\n                <Tooltip\n                  text={`Depends on ${(componentProps.parent: any)}`}\n                  id={`${componentProps.path}_parentinfo`}\n                  type='alert'\n                />\n              ) : (\n                ''\n              )}\n              {componentProps.$ref !== undefined ? (\n                <Tooltip\n                  text={`Is an instance of pre-configured component ${(componentProps.$ref: any)}`}\n                  id={`${componentProps.path}_refinfo`}\n                  type='alert'\n                />\n              ) : (\n                ''\n              )}\n            </span>\n            <span className='arrows'>\n              <i\n                className='fa fa-arrow-up'\n                id={`${componentProps.path}_moveupbiginfo`}\n                onClick={() => (onMoveUp ? onMoveUp() : {})}\n              />\n              <UncontrolledTooltip\n                placement='top'\n                target={`${componentProps.path}_moveupbiginfo`}\n              >\n                Move form element up\n              </UncontrolledTooltip>\n              <i\n                className='fa fa-arrow-down'\n                id={`${componentProps.path}_movedownbiginfo`}\n                onClick={() => (onMoveDown ? onMoveDown() : {})}\n              />\n              <UncontrolledTooltip\n                placement='top'\n                target={`${componentProps.path}_movedownbiginfo`}\n              >\n                Move form element down\n              </UncontrolledTooltip>\n            </span>\n          </React.Fragment>\n        }\n        className={`card-container ${\n          componentProps.dependent ? 'card-dependent' : ''\n        } ${componentProps.$ref === undefined ? '' : 'card-reference'}`}\n      >\n        <div className={classes.cardEntries}>\n          <CardGeneralParameterInputs\n            parameters={(componentProps: any)}\n            onChange={onChange}\n            allFormInputs={allFormInputs}\n            mods={mods}\n          />\n        </div>\n        <div className={classes.cardInteractions}>\n          <i\n            id={`${componentProps.path}_editinfo`}\n            className='fa fa-pencil'\n            onClick={() => setModalOpen(true)}\n          />\n          <UncontrolledTooltip\n            placement='top'\n            target={`${componentProps.path}_editinfo`}\n          >\n            Additional configurations for this form element\n          </UncontrolledTooltip>\n          <i\n            className='fa fa-trash'\n            id={`${componentProps.path}_trashinfo`}\n            onClick={onDelete || (() => {})}\n          />\n          <UncontrolledTooltip\n            placement='top'\n            target={`${componentProps.path}_trashinfo`}\n          >\n            Delete form element\n          </UncontrolledTooltip>\n          <FBCheckbox\n            onChangeValue={() =>\n              onChange({\n                ...componentProps,\n                required: !componentProps.required,\n              })\n            }\n            isChecked={!!componentProps.required}\n            label='Required'\n            id={`${\n              typeof componentProps.path === 'string'\n                ? componentProps.path\n                : 'card'\n            }_required`}\n          />\n        </div>\n        <CardModal\n          componentProps={componentProps}\n          isOpen={modalOpen}\n          onClose={() => setModalOpen(false)}\n          onChange={(newComponentProps: {\n            [string]: string | number | boolean | Array<string | number>,\n          }) => {\n            onChange(newComponentProps);\n          }}\n          TypeSpecificParameters={TypeSpecificParameters}\n        />\n      </Collapse>\n      {addElem ? (\n        <Add\n          name={`${componentProps.path}`}\n          addElem={(choice: string) => addElem(choice)}\n        />\n      ) : (\n        ''\n      )}\n    </React.Fragment>\n  );\n}\n","// @flow\nimport * as React from 'react';\nimport { Input } from 'reactstrap';\nimport Select from 'react-select';\nimport { createUseStyles } from 'react-jss';\nimport FBCheckbox from '../checkbox/FBCheckbox';\nimport CardEnumOptions from '../CardEnumOptions';\nimport type { Parameters } from '../types';\n\nconst useStyles = createUseStyles({\n  hidden: {\n    display: 'none',\n  },\n});\n\n// specify the inputs required for a string type object\nexport function CardDefaultParameterInputs() {\n  return <div />;\n}\n\nfunction TimeField({\n  parameters,\n  onChange,\n}: {\n  parameters: Parameters,\n  onChange: (newParams: Parameters) => void,\n}) {\n  return (\n    <React.Fragment>\n      <h5>Default time</h5>\n      <Input\n        value={parameters.default || ''}\n        placeholder='Default'\n        type='datetime-local'\n        onChange={(ev: SyntheticInputEvent<HTMLInputElement>) =>\n          onChange({ ...parameters, default: ev.target.value })\n        }\n        className='card-text'\n      />\n    </React.Fragment>\n  );\n}\n\nfunction Checkbox({\n  parameters,\n  onChange,\n}: {\n  parameters: Parameters,\n  onChange: (newParams: Parameters) => void,\n}) {\n  return (\n    <div className='card-boolean'>\n      <FBCheckbox\n        onChangeValue={() => {\n          onChange({\n            ...parameters,\n            default: parameters.default ? parameters.default !== true : true,\n          });\n        }}\n        isChecked={parameters.default ? parameters.default === true : false}\n        label='Default'\n      />\n    </div>\n  );\n}\n\nfunction MultipleChoice({\n  parameters,\n  onChange,\n}: {\n  parameters: Parameters,\n  onChange: (newParams: Parameters) => void,\n}) {\n  const classes = useStyles();\n  const enumArray = Array.isArray(parameters.enum) ? parameters.enum : [];\n  // eslint-disable-next-line no-restricted-globals\n  const containsUnparsableString = enumArray.some((val) => isNaN(val));\n  const containsString =\n    containsUnparsableString ||\n    enumArray.some((val) => typeof val === 'string');\n  const [isNumber, setIsNumber] = React.useState(\n    !!enumArray.length && !containsString,\n  );\n  return (\n    <div className='card-enum'>\n      <h3>Possible Values</h3>\n      <FBCheckbox\n        onChangeValue={() => {\n          if (Array.isArray(parameters.enumNames)) {\n            // remove the enumNames\n            onChange({\n              ...parameters,\n              enumNames: null,\n            });\n          } else {\n            // create enumNames as a copy of enum values\n            onChange({\n              ...parameters,\n              enumNames: enumArray.map((val) => `${val}`),\n            });\n          }\n        }}\n        isChecked={Array.isArray(parameters.enumNames)}\n        label='Display label is different from value'\n        id={`${parameters.path}_different`}\n      />\n      <div\n        className={\n          containsUnparsableString || !enumArray.length ? classes.hidden : ''\n        }\n      >\n        <FBCheckbox\n          onChangeValue={() => {\n            if (containsString || !isNumber) {\n              // attempt converting enum values into numbers\n              try {\n                const newEnum = enumArray.map((val) => {\n                  let newNum = 0;\n                  if (val) newNum = parseFloat(val) || 0;\n                  if (Number.isNaN(newNum))\n                    throw new Error(`Could not convert ${val}`);\n                  return newNum;\n                });\n                setIsNumber(true);\n                onChange({\n                  ...parameters,\n                  enum: newEnum,\n                });\n              } catch (error) {\n                // eslint-disable-next-line no-console\n                console.error(error);\n              }\n            } else {\n              // convert enum values back into strings\n              const newEnum = enumArray.map((val) => `${val || 0}`);\n              setIsNumber(false);\n              onChange({\n                ...parameters,\n                enum: newEnum,\n              });\n            }\n          }}\n          isChecked={isNumber}\n          disabled={containsUnparsableString}\n          label='Force number'\n          id={`${\n            typeof parameters.path === 'string' ? parameters.path : ''\n          }_forceNumber`}\n        />\n      </div>\n      <CardEnumOptions\n        initialValues={enumArray}\n        names={\n          Array.isArray(parameters.enumNames)\n            ? parameters.enumNames.map((val) => `${val}`)\n            : undefined\n        }\n        showNames={Array.isArray(parameters.enumNames)}\n        onChange={(newEnum: Array<string>, newEnumNames?: Array<string>) =>\n          onChange({\n            ...parameters,\n            enum: newEnum,\n            enumNames: newEnumNames,\n          })\n        }\n        type={isNumber ? 'number' : 'string'}\n      />\n    </div>\n  );\n}\n\nfunction RefChoice({\n  parameters,\n  onChange,\n}: {\n  parameters: Parameters,\n  onChange: (newParams: Parameters) => void,\n}) {\n  return (\n    <div className='card-select'>\n      <Select\n        value={{\n          value: parameters.$ref,\n          label: parameters.$ref,\n        }}\n        placeholder='Reference'\n        options={Object.keys(parameters.definitionData || {}).map((key) => ({\n          value: `#/definitions/${key}`,\n          label: `#/definitions/${key}`,\n        }))}\n        onChange={(val: any) => {\n          onChange({ ...parameters, $ref: val.value });\n        }}\n        className='card-select'\n      />\n    </div>\n  );\n}\n\nconst defaultInputs = {\n  time: {\n    displayName: 'Time',\n    matchIf: [\n      {\n        types: ['string'],\n        format: 'date-time',\n      },\n    ],\n    defaultDataSchema: {\n      format: 'date-time',\n    },\n    defaultUiSchema: {},\n    type: 'string',\n    cardBody: TimeField,\n    modalBody: CardDefaultParameterInputs,\n  },\n  checkbox: {\n    displayName: 'Checkbox',\n    matchIf: [\n      {\n        types: ['boolean'],\n      },\n    ],\n    defaultDataSchema: {},\n    defaultUiSchema: {},\n    type: 'boolean',\n    cardBody: Checkbox,\n    modalBody: CardDefaultParameterInputs,\n  },\n  ref: {\n    displayName: 'Reference',\n    matchIf: [\n      {\n        types: [null],\n        $ref: true,\n      },\n    ],\n    defaultDataSchema: {\n      $ref: '',\n    },\n    defaultUiSchema: {},\n    type: null,\n    cardBody: RefChoice,\n    modalBody: CardDefaultParameterInputs,\n  },\n  radio: {\n    displayName: 'Radio',\n    matchIf: [\n      {\n        types: ['string', 'number', 'integer', 'array', 'boolean', null],\n        widget: 'radio',\n        enum: true,\n      },\n    ],\n    defaultDataSchema: { enum: [] },\n    defaultUiSchema: {\n      'ui:widget': 'radio',\n    },\n    type: 'string',\n    cardBody: MultipleChoice,\n    modalBody: CardDefaultParameterInputs,\n  },\n  dropdown: {\n    displayName: 'Dropdown',\n    matchIf: [\n      {\n        types: ['string', 'number', 'integer', 'array', 'boolean', null],\n        enum: true,\n      },\n    ],\n    defaultDataSchema: { enum: [] },\n    defaultUiSchema: {},\n    type: 'string',\n    cardBody: MultipleChoice,\n    modalBody: CardDefaultParameterInputs,\n  },\n};\n\nexport default defaultInputs;\n","// @flow\nimport * as React from 'react';\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\nimport Select from 'react-select';\nimport { createUseStyles } from 'react-jss';\nimport { Alert, Input, UncontrolledTooltip } from 'reactstrap';\nimport FBCheckbox from './checkbox/FBCheckbox';\nimport Collapse from './Collapse/Collapse';\nimport CardModal from './CardModal';\nimport { CardDefaultParameterInputs } from './defaults/defaultInputs';\nimport Tooltip from './Tooltip';\nimport Add from './Add';\nimport Card from './Card';\nimport {\n  checkForUnsupportedFeatures,\n  generateElementComponentsFromSchemas,\n  countElementsFromSchema,\n  addCardObj,\n  addSectionObj,\n  onDragEnd,\n} from './utils';\nimport type { FormInput, Mods } from './types';\n\nconst useStyles = createUseStyles({\n  sectionContainer: {\n    '& .section-head': {\n      borderBottom: '1px solid var(--gray)',\n      margin: '0.5em 1.5em 0 1.5em',\n      '& h5': {\n        color: 'black',\n        fontSize: '14px',\n        fontWeight: 'bold',\n        margin: '0',\n      },\n      '& .section-entry': {\n        display: 'inline-block',\n        margin: '0',\n        width: '33%',\n        textAlign: 'left',\n        padding: '0.5em',\n      },\n      '& .section-reference': { width: '100%' },\n    },\n    '& .section-footer': {\n      marginTop: '1em',\n      textAlign: 'center',\n      i: { cursor: 'pointer' },\n    },\n    '& .section-interactions': {\n      margin: '0.5em 1.5em',\n      textAlign: 'left',\n      borderTop: '1px solid var(--gray)',\n      paddingTop: '1em',\n      '& .fa': { marginRight: '1em', borderRadius: '4px', padding: '0.25em' },\n      '& .fa-pencil, & .fa-arrow-up, & .fa-arrow-down': {\n        border: '1px solid #1d71ad',\n        color: '#1d71ad',\n      },\n      '& .fa-trash': { border: '1px solid #de5354', color: '#de5354' },\n      '& .fa-arrow-up, & .fa-arrow-down': { marginRight: '0.5em' },\n      '& .fb-checkbox': {\n        display: 'inline-block',\n        label: { color: '#9aa4ab' },\n      },\n      '& .interactions-left, & .interactions-right': {\n        display: 'inline-block',\n        width: '48%',\n        margin: '0 auto',\n      },\n      '& .interactions-left': { textAlign: 'left' },\n      '& .interactions-right': { textAlign: 'right' },\n    },\n  },\n});\n\nexport default function Section({\n  name,\n  required,\n  schema,\n  uischema,\n  onChange,\n  onNameChange,\n  onRequireToggle,\n  onDependentsChange,\n  onDelete,\n  onMoveUp,\n  onMoveDown,\n  path,\n  definitionData,\n  definitionUi,\n  hideKey,\n  reference,\n  dependents,\n  dependent,\n  parent,\n  neighborNames,\n  addElem,\n  cardOpen,\n  setCardOpen,\n  allFormInputs,\n  mods,\n  categoryHash,\n}: {\n  name: string,\n  required: boolean,\n  schema: { [string]: any },\n  uischema: { [string]: any },\n  onChange: (\n    schema: { [string]: any },\n    uischema: { [string]: any },\n    ref?: string,\n  ) => void,\n  onNameChange: (string) => void,\n  onDependentsChange: (\n    Array<{\n      children: Array<string>,\n      value?: any,\n    }>,\n  ) => void,\n  onRequireToggle: () => any,\n  onDelete: () => any,\n  onMoveUp?: () => any,\n  onMoveDown?: () => any,\n  path: string,\n  definitionData: { [string]: any },\n  definitionUi: { [string]: any },\n  hideKey?: boolean,\n  reference?: string,\n  dependents?: Array<{\n    children: Array<string>,\n    value?: any,\n  }>,\n  dependent?: boolean,\n  parent?: string,\n  neighborNames?: Array<string>,\n  addElem?: (choice: string) => void,\n  cardOpen: boolean,\n  setCardOpen: (newState: boolean) => void,\n  allFormInputs: { [string]: FormInput },\n  mods?: Mods,\n  categoryHash: { [string]: string },\n}) {\n  const classes = useStyles();\n  const unsupportedFeatures = checkForUnsupportedFeatures(\n    schema || {},\n    uischema || {},\n    allFormInputs,\n  );\n  const schemaData = schema || {};\n  const elementNum = countElementsFromSchema(schemaData);\n  const defaultCollapseStates = [...Array(elementNum)].map(() => false);\n  const [cardOpenArray, setCardOpenArray] = React.useState(\n    defaultCollapseStates,\n  );\n  // keep name in state to avoid losing focus\n  const [keyName, setKeyName] = React.useState(name);\n  // keep requirements in state to avoid rapid updates\n  const [modalOpen, setModalOpen] = React.useState(false);\n\n  return (\n    <React.Fragment>\n      <Collapse\n        isOpen={cardOpen}\n        toggleCollapse={() => setCardOpen(!cardOpen)}\n        title={\n          <React.Fragment>\n            <span onClick={() => setCardOpen(!cardOpen)} className='label'>\n              {schemaData.title || keyName}{' '}\n              {parent ? (\n                <Tooltip\n                  text={`Depends on ${parent}`}\n                  id={`${keyName}_parentinfo`}\n                  type='alert'\n                />\n              ) : (\n                ''\n              )}\n            </span>\n            <span className='arrows'>\n              <i\n                className='fa fa-arrow-up'\n                id={`${path}_moveupbiginfo`}\n                onClick={() => (onMoveUp ? onMoveUp() : {})}\n              />\n              <UncontrolledTooltip\n                placement='top'\n                target={`${path}_moveupbiginfo`}\n              >\n                Move form element up\n              </UncontrolledTooltip>\n              <i\n                className='fa fa-arrow-down'\n                id={`${path}_movedownbiginfo`}\n                onClick={() => (onMoveDown ? onMoveDown() : {})}\n              />\n              <UncontrolledTooltip\n                placement='top'\n                target={`${path}_movedownbiginfo`}\n              >\n                Move form element down\n              </UncontrolledTooltip>\n            </span>\n          </React.Fragment>\n        }\n        className={`section-container ${classes.sectionContainer} ${\n          dependent ? 'section-dependent' : ''\n        } ${reference ? 'section-reference' : ''}`}\n      >\n        <div\n          className={`section-entries ${reference ? 'section-reference' : ''}`}\n        >\n          <div className='section-head'>\n            {reference ? (\n              <div className='section-entry section-reference'>\n                <h5>Reference Section</h5>\n                <Select\n                  value={{\n                    value: reference,\n                    label: reference,\n                  }}\n                  placeholder='Reference'\n                  options={Object.keys(definitionData).map((key) => ({\n                    value: `#/definitions/${key}`,\n                    label: `#/definitions/${key}`,\n                  }))}\n                  onChange={(val: any) => {\n                    onChange(schema, uischema, val.value);\n                  }}\n                  className='section-select'\n                />\n              </div>\n            ) : (\n              ''\n            )}\n            <div className='section-entry'>\n              <h5>\n                Section Object Name{' '}\n                <Tooltip\n                  text='The name that will appear in the backend of Servicely'\n                  id={`${keyName}_nameinfo`}\n                  type='help'\n                />\n              </h5>\n              <Input\n                value={keyName || ''}\n                placeholder='Key'\n                type='text'\n                onChange={(ev: SyntheticInputEvent<HTMLInputElement>) =>\n                  setKeyName(ev.target.value.replace(/\\W/g, '_'))\n                }\n                onBlur={(ev: SyntheticInputEvent<HTMLInputElement>) =>\n                  onNameChange(ev.target.value)\n                }\n                className='card-text'\n                readOnly={hideKey}\n              />\n            </div>\n            <div className='section-entry'>\n              <h5>\n                Section Display Name{' '}\n                <Tooltip\n                  text='The name Servicely will show to service requesters'\n                  id={`${keyName}_titleinfo`}\n                  type='help'\n                />\n              </h5>\n              <Input\n                value={schemaData.title || ''}\n                placeholder='Title'\n                type='text'\n                onChange={(ev: SyntheticInputEvent<HTMLInputElement>) =>\n                  onChange(\n                    {\n                      ...schema,\n                      title: ev.target.value,\n                    },\n                    uischema,\n                  )\n                }\n                className='card-text'\n              />\n            </div>\n            <div className='section-entry'>\n              <h5>\n                Section Description{' '}\n                <Tooltip\n                  text='This will appear as gray text in the service request form'\n                  id={`${keyName}_descriptioninfo`}\n                  type='help'\n                />\n              </h5>\n              <Input\n                value={schemaData.description || ''}\n                placeholder='Description'\n                type='text'\n                onChange={(ev: SyntheticInputEvent<HTMLInputElement>) =>\n                  onChange(\n                    {\n                      ...schema,\n                      description: ev.target.value,\n                    },\n                    uischema,\n                  )\n                }\n                className='card-text'\n              />\n            </div>\n            <Alert\n              style={{\n                display: unsupportedFeatures.length === 0 ? 'none' : 'block',\n              }}\n              color='warning'\n            >\n              <h5>Unsupported Features:</h5>\n              {unsupportedFeatures.map((message) => (\n                <li key={`${path}_${message}`}>{message}</li>\n              ))}\n            </Alert>\n          </div>\n          <div className='section-body'>\n            <DragDropContext\n              onDragEnd={(result) =>\n                onDragEnd(result, {\n                  schema,\n                  uischema,\n                  onChange,\n                  definitionData,\n                  definitionUi,\n                  categoryHash,\n                })\n              }\n              className='section-body'\n            >\n              <Droppable droppableId='droppable'>\n                {(providedDroppable) => (\n                  <div\n                    ref={providedDroppable.innerRef}\n                    {...providedDroppable.droppableProps}\n                  >\n                    {generateElementComponentsFromSchemas({\n                      schemaData: schema,\n                      uiSchemaData: uischema,\n                      onChange,\n                      path,\n                      definitionData,\n                      definitionUi,\n                      cardOpenArray,\n                      setCardOpenArray,\n                      allFormInputs,\n                      mods,\n                      categoryHash,\n                      Card,\n                      Section,\n                    }).map((element: any, index) => (\n                      <Draggable\n                        key={element.key}\n                        draggableId={element.key}\n                        index={index}\n                      >\n                        {(providedDraggable) => (\n                          <div\n                            ref={providedDraggable.innerRef}\n                            {...providedDraggable.draggableProps}\n                            {...providedDraggable.dragHandleProps}\n                          >\n                            {element}\n                          </div>\n                        )}\n                      </Draggable>\n                    ))}\n                    {providedDroppable.placeholder}\n                  </div>\n                )}\n              </Droppable>\n            </DragDropContext>\n          </div>\n          <div className='section-footer'>\n            <Add\n              name={`${keyName}_inner`}\n              addElem={(choice: string) => {\n                if (choice === 'card') {\n                  addCardObj({\n                    schema,\n                    uischema,\n                    onChange,\n                    definitionData,\n                    definitionUi,\n                    categoryHash,\n                  });\n                } else if (choice === 'section') {\n                  addSectionObj({\n                    schema,\n                    uischema,\n                    onChange,\n                    definitionData,\n                    definitionUi,\n                    categoryHash,\n                  });\n                }\n              }}\n              hidden={\n                schemaData.properties &&\n                Object.keys(schemaData.properties).length !== 0\n              }\n            />\n          </div>\n          <div className='section-interactions'>\n            <i\n              className='fa fa-pencil'\n              id={`${path}_editinfo`}\n              onClick={() => setModalOpen(true)}\n            />\n            <UncontrolledTooltip placement='top' target={`${path}_editinfo`}>\n              Additional configurations for this form element\n            </UncontrolledTooltip>\n            <i\n              className='fa fa-trash'\n              id={`${path}_trashinfo`}\n              onClick={() => (onDelete ? onDelete() : {})}\n            />\n            <UncontrolledTooltip placement='top' target={`${path}_trashinfo`}>\n              Delete form element\n            </UncontrolledTooltip>\n            <FBCheckbox\n              onChangeValue={() => onRequireToggle()}\n              isChecked={required}\n              label='Required'\n              id={`${path}_required`}\n            />\n          </div>\n        </div>\n        <CardModal\n          componentProps={{\n            dependents,\n            neighborNames,\n            name: keyName,\n            schema,\n            type: 'object',\n          }}\n          isOpen={modalOpen}\n          onClose={() => setModalOpen(false)}\n          onChange={(newComponentProps: { [string]: any }) => {\n            onDependentsChange(newComponentProps.dependents);\n          }}\n          TypeSpecificParameters={CardDefaultParameterInputs}\n        />\n      </Collapse>\n      {addElem ? (\n        <Add name={keyName} addElem={(choice: string) => addElem(choice)} />\n      ) : (\n        ''\n      )}\n    </React.Fragment>\n  );\n}\n","// @flow\n\nimport React from 'react';\nimport Select from 'react-select';\nimport { Input } from 'reactstrap';\nimport FBCheckbox from '../checkbox/FBCheckbox';\nimport Tooltip from '../Tooltip';\nimport type { Parameters } from '../types';\n\nconst formatDictionary = {\n  '': 'None',\n  'date-time': 'Date-Time',\n  email: 'Email',\n  hostname: 'Hostname',\n  time: 'Time',\n  uri: 'URI',\n  regex: 'Regular Expression',\n};\n\nconst autoDictionary = {\n  '': 'None',\n  email: 'Email',\n  username: 'User Name',\n  password: 'Password',\n  'street-address': 'Street Address',\n  country: 'Country',\n};\n\n// specify the inputs required for a string type object\nfunction CardShortAnswerParameterInputs({\n  parameters,\n  onChange,\n}: {\n  parameters: Parameters,\n  onChange: (newParams: Parameters) => void,\n}) {\n  return (\n    <div>\n      <h4>Minimum Length</h4>\n      <Input\n        value={parameters.minLength ? parameters.minLength : ''}\n        placeholder='Minimum Length'\n        key='minLength'\n        type='number'\n        onChange={(ev: SyntheticInputEvent<HTMLInputElement>) => {\n          onChange({\n            ...parameters,\n            minLength: parseInt(ev.target.value, 10),\n          });\n        }}\n        className='card-modal-number'\n      />\n      <h4>Maximum Length</h4>\n      <Input\n        value={parameters.maxLength ? parameters.maxLength : ''}\n        placeholder='Maximum Length'\n        key='maxLength'\n        type='number'\n        onChange={(ev: SyntheticInputEvent<HTMLInputElement>) => {\n          onChange({\n            ...parameters,\n            maxLength: parseInt(ev.target.value, 10),\n          });\n        }}\n        className='card-modal-number'\n      />\n      <h4>\n        Regular Expression Pattern\n        <a\n          href='https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions'\n          target='_blank'\n          rel='noopener noreferrer'\n        >\n          <Tooltip\n            id={`${parameters.path}_regex`}\n            type='help'\n            text='Regular expression pattern that this must satisfy'\n          />\n        </a>\n      </h4>\n      <Input\n        value={parameters.pattern ? parameters.pattern : ''}\n        placeholder='Regular Expression Pattern'\n        key='pattern'\n        type='text'\n        onChange={(ev: SyntheticInputEvent<HTMLInputElement>) => {\n          onChange({\n            ...parameters,\n            pattern: ev.target.value,\n          });\n        }}\n        className='card-modal-text'\n      />\n      <h4>\n        Format{' '}\n        <Tooltip\n          id={`${parameters.path}_format`}\n          type='help'\n          text='Require string input to match a certain common format'\n        />\n      </h4>\n      <Select\n        value={{\n          value: parameters.format\n            ? formatDictionary[\n                typeof parameters.format === 'string' ? parameters.format : ''\n              ]\n            : '',\n          label: parameters.format\n            ? formatDictionary[\n                typeof parameters.format === 'string' ? parameters.format : ''\n              ]\n            : 'None',\n        }}\n        placeholder='Format'\n        key='format'\n        options={Object.keys(formatDictionary).map((key) => ({\n          value: key,\n          label: formatDictionary[key],\n        }))}\n        onChange={(val: any) => {\n          onChange({\n            ...parameters,\n            format: val.value,\n          });\n        }}\n        className='card-modal-select'\n      />\n      <h5>\n        Auto Complete Category{' '}\n        <a\n          href='https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete'\n          target='_blank'\n          rel='noopener noreferrer'\n        >\n          <Tooltip\n            id={`${parameters.path}_autocomplete`}\n            type='help'\n            text=\"Suggest entries based on the user's browser history\"\n          />\n        </a>\n      </h5>\n      <Select\n        value={{\n          value: parameters['ui:autocomplete']\n            ? autoDictionary[\n                typeof parameters['ui:autocomplete'] === 'string'\n                  ? parameters['ui:autocomplete']\n                  : ''\n              ]\n            : '',\n          label: parameters['ui:autocomplete']\n            ? autoDictionary[\n                typeof parameters['ui:autocomplete'] === 'string'\n                  ? parameters['ui:autocomplete']\n                  : ''\n              ]\n            : 'None',\n        }}\n        placeholder='Auto Complete'\n        key='ui:autocomplete'\n        options={Object.keys(autoDictionary).map((key) => ({\n          value: key,\n          label: autoDictionary[key],\n        }))}\n        onChange={(val: any) => {\n          onChange({\n            ...parameters,\n            'ui:autocomplete': val.value,\n          });\n        }}\n        className='card-modal-select'\n      />\n      <div className='card-modal-boolean'>\n        <FBCheckbox\n          onChangeValue={() => {\n            onChange({\n              ...parameters,\n              'ui:autofocus': parameters['ui:autofocus']\n                ? parameters['ui:autofocus'] !== true\n                : true,\n            });\n          }}\n          isChecked={\n            parameters['ui:autofocus']\n              ? parameters['ui:autofocus'] === true\n              : false\n          }\n          label='Auto Focus'\n        />\n      </div>\n    </div>\n  );\n}\n\nfunction ShortAnswerField({\n  parameters,\n  onChange,\n}: {\n  parameters: Parameters,\n  onChange: (newParams: Parameters) => void,\n}) {\n  return (\n    <React.Fragment>\n      <h5>Default value</h5>\n      <Input\n        value={parameters.default}\n        placeholder='Default'\n        type='text'\n        onChange={(ev: SyntheticInputEvent<HTMLInputElement>) =>\n          onChange({ ...parameters, default: ev.target.value })\n        }\n        className='card-text'\n      />\n    </React.Fragment>\n  );\n}\n\nfunction Password({\n  parameters,\n  onChange,\n}: {\n  parameters: Parameters,\n  onChange: (newParams: Parameters) => void,\n}) {\n  return (\n    <React.Fragment>\n      <h5>Default password</h5>\n      <Input\n        value={parameters.default}\n        placeholder='Default'\n        type='password'\n        onChange={(ev: SyntheticInputEvent<HTMLInputElement>) =>\n          onChange({ ...parameters, default: ev.target.value })\n        }\n        className='card-text'\n      />\n    </React.Fragment>\n  );\n}\n\nconst shortAnswerInput = {\n  shortAnswer: {\n    displayName: 'Short Answer',\n    matchIf: [\n      {\n        types: ['string'],\n      },\n    ],\n    defaultDataSchema: {},\n    defaultUiSchema: {},\n    type: 'string',\n    cardBody: ShortAnswerField,\n    modalBody: CardShortAnswerParameterInputs,\n  },\n  password: {\n    displayName: 'Password',\n    matchIf: [\n      {\n        types: ['string'],\n        widget: 'password',\n      },\n    ],\n    defaultDataSchema: {},\n    defaultUiSchema: {\n      'ui:widget': 'password',\n    },\n    type: 'string',\n    cardBody: Password,\n    modalBody: CardShortAnswerParameterInputs,\n  },\n};\n\nexport default shortAnswerInput;\n","// @flow\n\nimport React from 'react';\nimport Select from 'react-select';\nimport { Input } from 'reactstrap';\nimport FBCheckbox from '../checkbox/FBCheckbox';\nimport Tooltip from '../Tooltip';\nimport type { Parameters } from '../types';\n\nconst formatDictionary = {\n  '': 'None',\n  'date-time': 'Date-Time',\n  email: 'Email',\n  hostname: 'Hostname',\n  time: 'Time',\n  uri: 'URI',\n  regex: 'Regular Expression',\n};\n\n// specify the inputs required for a string type object\nfunction CardLongAnswerParameterInputs({\n  parameters,\n  onChange,\n}: {\n  parameters: Parameters,\n  onChange: (newParams: Parameters) => void,\n}) {\n  return (\n    <div>\n      <h4>Minimum Length</h4>\n      <Input\n        value={parameters.minLength ? parameters.minLength : ''}\n        placeholder='Minimum Length'\n        key='minLength'\n        type='number'\n        onChange={(ev: SyntheticInputEvent<HTMLInputElement>) => {\n          onChange({\n            ...parameters,\n            minLength: parseInt(ev.target.value, 10),\n          });\n        }}\n        className='card-modal-number'\n      />\n      <h4>Maximum Length</h4>\n      <Input\n        value={parameters.maxLength ? parameters.maxLength : ''}\n        placeholder='Maximum Length'\n        key='maxLength'\n        type='number'\n        onChange={(ev: SyntheticInputEvent<HTMLInputElement>) => {\n          onChange({\n            ...parameters,\n            maxLength: parseInt(ev.target.value, 10),\n          });\n        }}\n        className='card-modal-number'\n      />\n      <h4>\n        Regular Expression Pattern\n        <a href='https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions'>\n          <Tooltip\n            id={`${parameters.path}_regex`}\n            type='help'\n            text='Regular expression pattern that this must satisfy'\n          />\n        </a>\n      </h4>\n      <Input\n        value={parameters.pattern ? parameters.pattern : ''}\n        placeholder='Regular Expression Pattern'\n        key='pattern'\n        type='text'\n        onChange={(ev: SyntheticInputEvent<HTMLInputElement>) => {\n          onChange({\n            ...parameters,\n            pattern: ev.target.value,\n          });\n        }}\n        className='card-modal-text'\n      />\n      <h4>\n        Format{' '}\n        <Tooltip\n          id={`${parameters.path}_format`}\n          type='help'\n          text='Require string input to match a certain common format'\n        />\n      </h4>\n      <Select\n        value={{\n          value: parameters.format\n            ? formatDictionary[\n                typeof parameters.format === 'string' ? parameters.format : ''\n              ]\n            : '',\n          label: parameters.format\n            ? formatDictionary[\n                typeof parameters.format === 'string' ? parameters.format : ''\n              ]\n            : 'None',\n        }}\n        placeholder='Format'\n        key='format'\n        options={Object.keys(formatDictionary).map((key) => ({\n          value: key,\n          label: formatDictionary[key],\n        }))}\n        onChange={(val: any) => {\n          onChange({\n            ...parameters,\n            format: val.value,\n          });\n        }}\n        className='card-modal-select'\n      />\n      <div className='card-modal-boolean'>\n        <FBCheckbox\n          onChangeValue={() => {\n            onChange({\n              ...parameters,\n              'ui:autofocus': parameters['ui:autofocus']\n                ? parameters['ui:autofocus'] !== true\n                : true,\n            });\n          }}\n          isChecked={\n            parameters['ui:autofocus']\n              ? parameters['ui:autofocus'] === true\n              : false\n          }\n          label='Auto Focus'\n        />\n      </div>\n    </div>\n  );\n}\n\nfunction LongAnswer({\n  parameters,\n  onChange,\n}: {\n  parameters: Parameters,\n  onChange: (newParams: Parameters) => void,\n}) {\n  return (\n    <React.Fragment>\n      <h5>Default input</h5>\n      <Input\n        value={parameters.default}\n        placeholder='Default'\n        type='textarea'\n        onChange={(ev: SyntheticInputEvent<HTMLInputElement>) =>\n          onChange({ ...parameters, default: ev.target.value })\n        }\n        className='card-textarea'\n      />\n    </React.Fragment>\n  );\n}\n\nconst longAnswerInput = {\n  longAnswer: {\n    displayName: 'Long Answer',\n    matchIf: [\n      {\n        types: ['string'],\n        widget: 'textarea',\n      },\n    ],\n    defaultDataSchema: {},\n    defaultUiSchema: {\n      'ui:widget': 'textarea',\n    },\n    type: 'string',\n    cardBody: LongAnswer,\n    modalBody: CardLongAnswerParameterInputs,\n  },\n};\n\nexport default longAnswerInput;\n","// @flow\n\nimport React from 'react';\nimport { Input } from 'reactstrap';\nimport FBCheckbox from '../checkbox/FBCheckbox';\nimport Tooltip from '../Tooltip';\nimport type { Parameters } from '../types';\n\n// specify the inputs required for a number type object\nfunction CardNumberParameterInputs({\n  parameters,\n  onChange,\n}: {\n  parameters: Parameters,\n  onChange: (newParams: Parameters) => void,\n}) {\n  return (\n    <div>\n      <h4>\n        Multiple of{' '}\n        <Tooltip\n          id={`${parameters.path}_multiple`}\n          type='help'\n          text='Require number to be a multiple of this number'\n        />\n      </h4>\n      <Input\n        value={parameters.multipleOf ? parameters.multipleOf : ''}\n        placeholder='ex: 2'\n        key='multipleOf'\n        type='number'\n        onChange={(ev: SyntheticInputEvent<HTMLInputElement>) => {\n          let newVal = parseFloat(ev.target.value);\n          if (Number.isNaN(newVal)) newVal = null;\n          onChange({\n            ...parameters,\n            multipleOf: newVal,\n          });\n        }}\n        className='card-modal-number'\n      />\n      <h4>Minimum</h4>\n      <Input\n        value={parameters.minimum || parameters.exclusiveMinimum || ''}\n        placeholder='ex: 3'\n        key='minimum'\n        type='number'\n        onChange={(ev: SyntheticInputEvent<HTMLInputElement>) => {\n          let newVal = parseFloat(ev.target.value);\n          if (Number.isNaN(newVal)) newVal = null;\n          // change either min or exclusiveMin depending on which one is active\n          if (parameters.exclusiveMinimum) {\n            onChange({\n              ...parameters,\n              exclusiveMinimum: newVal,\n              minimum: null,\n            });\n          } else {\n            onChange({\n              ...parameters,\n              minimum: newVal,\n              exclusiveMinimum: null,\n            });\n          }\n        }}\n        className='card-modal-number'\n      />\n      <div className='card-modal-boolean'>\n        <FBCheckbox\n          key='exclusiveMinimum'\n          onChangeValue={() => {\n            const newMin = parameters.minimum || parameters.exclusiveMinimum;\n            if (parameters.exclusiveMinimum) {\n              onChange({\n                ...parameters,\n                exclusiveMinimum: null,\n                minimum: newMin,\n              });\n            } else {\n              onChange({\n                ...parameters,\n                exclusiveMinimum: newMin,\n                minimum: null,\n              });\n            }\n          }}\n          isChecked={!!parameters.exclusiveMinimum}\n          disabled={!parameters.minimum && !parameters.exclusiveMinimum}\n          label='Exclusive Minimum'\n        />\n      </div>\n      <h4>Maximum</h4>\n      <Input\n        value={parameters.maximum || parameters.exclusiveMaximum || ''}\n        placeholder='ex: 8'\n        key='maximum'\n        type='number'\n        onChange={(ev: SyntheticInputEvent<HTMLInputElement>) => {\n          let newVal = parseFloat(ev.target.value);\n          if (Number.isNaN(newVal)) newVal = null;\n          // change either max or exclusiveMax depending on which one is active\n          if (parameters.exclusiveMinimum) {\n            onChange({\n              ...parameters,\n              exclusiveMaximum: newVal,\n              maximum: null,\n            });\n          } else {\n            onChange({\n              ...parameters,\n              maximum: newVal,\n              exclusiveMaximum: null,\n            });\n          }\n        }}\n        className='card-modal-number'\n      />\n      <div className='card-modal-boolean'>\n        <FBCheckbox\n          key='exclusiveMaximum'\n          onChangeValue={() => {\n            const newMax = parameters.maximum || parameters.exclusiveMaximum;\n            if (parameters.exclusiveMaximum) {\n              onChange({\n                ...parameters,\n                exclusiveMaximum: null,\n                maximum: newMax,\n              });\n            } else {\n              onChange({\n                ...parameters,\n                exclusiveMaximum: newMax,\n                maximum: null,\n              });\n            }\n          }}\n          isChecked={!!parameters.exclusiveMaximum}\n          disabled={!parameters.maximum && !parameters.exclusiveMaximum}\n          label='Exclusive Maximum'\n        />\n      </div>\n    </div>\n  );\n}\n\nfunction NumberField({\n  parameters,\n  onChange,\n}: {\n  parameters: Parameters,\n  onChange: (newParams: Parameters) => void,\n}) {\n  return (\n    <React.Fragment>\n      <h5>Default number</h5>\n      <Input\n        value={parameters.default}\n        placeholder='Default'\n        type='number'\n        onChange={(ev: SyntheticInputEvent<HTMLInputElement>) =>\n          onChange({\n            ...parameters,\n            default: parseFloat(ev.target.value),\n          })\n        }\n        className='card-number'\n      />\n    </React.Fragment>\n  );\n}\n\nconst numberInputs = {\n  integer: {\n    displayName: 'Integer',\n    matchIf: [\n      {\n        types: ['integer'],\n      },\n      {\n        types: ['integer'],\n        widget: 'number',\n      },\n    ],\n    defaultDataSchema: {},\n    defaultUiSchema: {},\n    type: 'integer',\n    cardBody: NumberField,\n    modalBody: CardNumberParameterInputs,\n  },\n  number: {\n    displayName: 'Number',\n    matchIf: [\n      {\n        types: ['number'],\n      },\n    ],\n    defaultDataSchema: {},\n    defaultUiSchema: {},\n    type: 'number',\n    cardBody: NumberField,\n    modalBody: CardNumberParameterInputs,\n  },\n};\n\nexport default numberInputs;\n","// @flow\n\nimport React from 'react';\nimport { Input } from 'reactstrap';\nimport {\n  generateElementComponentsFromSchemas,\n  generateCategoryHash,\n} from '../utils';\nimport Card from '../Card';\nimport Section from '../Section';\nimport FBCheckbox from '../checkbox/FBCheckbox';\nimport shortAnswerInputs from './shortAnswerInputs';\nimport longAnswerInputs from './longAnswerInputs';\nimport numberInputs from './numberInputs';\nimport defaultInputs from './defaultInputs';\nimport type { Parameters, Mods, FormInput } from '../types';\n\n// specify the inputs required for a string type object\nfunction CardArrayParameterInputs({\n  parameters,\n  onChange,\n}: {\n  parameters: Parameters,\n  onChange: ({ [string]: any }) => void,\n}) {\n  return (\n    <div>\n      <h4>Minimum Items</h4>\n      <Input\n        value={parameters.minItems || ''}\n        placeholder='ex: 2'\n        key='minimum'\n        type='number'\n        onChange={(ev: SyntheticInputEvent<HTMLInputElement>) => {\n          onChange({\n            ...parameters,\n            minItems: parseInt(ev.target.value, 10),\n          });\n        }}\n        className='card-modal-number'\n      />\n      <h4>Maximum Items</h4>\n      <Input\n        value={parameters.maxItems || ''}\n        placeholder='ex: 2'\n        key='maximum'\n        type='number'\n        onChange={(ev: SyntheticInputEvent<HTMLInputElement>) => {\n          onChange({\n            ...parameters,\n            maxItems: parseInt(ev.target.value, 10),\n          });\n        }}\n        className='card-modal-number'\n      />\n    </div>\n  );\n}\n\nfunction InnerCardWrapper({\n  defaultFormInputs,\n}: {\n  defaultFormInputs: { [string]: FormInput },\n}) {\n  return function InnerCard({\n    parameters,\n    onChange,\n    mods,\n  }: {\n    parameters: Parameters,\n    onChange: (newParams: Parameters) => void,\n    mods?: Mods,\n  }) {\n    const newDataProps = {};\n    const newUiProps = {};\n    const allFormInputs = {\n      ...defaultFormInputs,\n      ...(mods && mods.customFormInputs),\n    };\n    // parse components into data and ui relevant pieces\n    Object.keys(parameters).forEach((propName) => {\n      if (propName.startsWith('ui:*')) {\n        newUiProps[propName.substring(4)] = parameters[propName];\n      } else if (propName.startsWith('ui:')) {\n        newUiProps[propName] = parameters[propName];\n      } else if (!['name', 'required'].includes(propName)) {\n        newDataProps[propName] = parameters[propName];\n      }\n    });\n\n    const definitionData = parameters.definitionData\n      ? parameters.definitionData\n      : {};\n    const definitionUi = parameters.definitionUi ? parameters.definitionUi : {};\n    const [cardOpen, setCardOpen] = React.useState(false);\n    if (parameters.type !== 'array') {\n      return <h4>Not an array </h4>;\n    }\n    return (\n      <div className='card-array'>\n        <FBCheckbox\n          onChangeValue={() => {\n            if (newDataProps.items.type === 'object') {\n              onChange({\n                ...parameters,\n                items: {\n                  ...newDataProps.items,\n                  type: 'string',\n                },\n              });\n            } else {\n              onChange({\n                ...parameters,\n                items: {\n                  ...newDataProps.items,\n                  type: 'object',\n                },\n              });\n            }\n          }}\n          isChecked={newDataProps.items.type === 'object'}\n          label='Section'\n          id={`${\n            typeof parameters.path === 'string' ? parameters.path : ''\n          }_issection`}\n        />\n        {generateElementComponentsFromSchemas({\n          schemaData: { properties: { Item: newDataProps.items } },\n          uiSchemaData: { Item: newUiProps.items },\n          onChange: (schema, uischema) => {\n            onChange({\n              ...parameters,\n              items: schema.properties.Item,\n              'ui:*items': uischema.Item || {},\n            });\n          },\n          path: typeof parameters.path === 'string' ? parameters.path : 'array',\n          definitionData:\n            typeof definitionData === 'string' ? definitionData : {},\n          definitionUi: typeof definitionUi === 'string' ? definitionUi : {},\n          hideKey: true,\n          cardOpenArray: [cardOpen],\n          setCardOpenArray: (newArr) => setCardOpen(newArr[0]),\n          allFormInputs,\n          mods,\n          categoryHash: generateCategoryHash(allFormInputs),\n          Card,\n          Section,\n        })}\n      </div>\n    );\n  };\n}\n\nconst defaultFormInputs = ({\n  ...defaultInputs,\n  ...shortAnswerInputs,\n  ...longAnswerInputs,\n  ...numberInputs,\n}: { [string]: FormInput });\ndefaultFormInputs.array = {\n  displayName: 'Array',\n  matchIf: [\n    {\n      types: ['array'],\n    },\n  ],\n  defaultDataSchema: {\n    items: { type: 'string' },\n  },\n  defaultUiSchema: {},\n  type: 'array',\n  cardBody: InnerCardWrapper({ defaultFormInputs }),\n  modalBody: CardArrayParameterInputs,\n};\n\nconst ArrayInputs = {\n  array: {\n    displayName: 'Array',\n    matchIf: [\n      {\n        types: ['array'],\n      },\n    ],\n    defaultDataSchema: {\n      items: { type: 'string' },\n    },\n    defaultUiSchema: {},\n    type: 'array',\n    cardBody: InnerCardWrapper({ defaultFormInputs }),\n    modalBody: CardArrayParameterInputs,\n  },\n};\n\nexport default ArrayInputs;\n","// @flow\nimport shortAnswerInputs from './shortAnswerInputs';\nimport longAnswerInputs from './longAnswerInputs';\nimport numberInputs from './numberInputs';\nimport arrayInputs from './arrayInputs';\nimport defaultInputs from './defaultInputs';\nimport type { FormInput } from '../types';\n\nconst DEFAULT_FORM_INPUTS = ({\n  ...defaultInputs,\n  ...shortAnswerInputs,\n  ...longAnswerInputs,\n  ...numberInputs,\n  ...arrayInputs,\n}: { [string]: FormInput });\n\nexport default DEFAULT_FORM_INPUTS;\n","// @flow\nimport * as React from 'react';\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\nimport { Alert, Input } from 'reactstrap';\nimport { createUseStyles } from 'react-jss';\nimport Card from './Card';\nimport Section from './Section';\nimport Add from './Add';\nimport {\n  parse,\n  stringify,\n  checkForUnsupportedFeatures,\n  generateElementComponentsFromSchemas,\n  addCardObj,\n  addSectionObj,\n  onDragEnd,\n  countElementsFromSchema,\n  generateCategoryHash,\n} from './utils';\nimport DEFAULT_FORM_INPUTS from './defaults/defaultFormInputs';\nimport type { Mods } from './types';\n\nconst useStyles = createUseStyles({\n  formBuilder: {\n    'text-align': 'center',\n    '& i': {\n      cursor: 'pointer',\n    },\n    '& .fa-question-circle': {\n      color: 'gray',\n    },\n    '& .fa-asterisk': {\n      'font-size': '.9em',\n      color: 'green',\n    },\n    '& .fa-plus-square': {\n      color: 'green',\n      'font-size': '1.5em',\n      margin: '0 auto',\n    },\n    '& .card-container': {\n      '&:hover': {\n        border: '1px solid green',\n      },\n      display: 'block',\n      width: '70%',\n      'min-width': '400px',\n      margin: '2em auto',\n      border: '1px solid gray',\n      'border-radius': '4px',\n      'background-color': 'white',\n      '& .toggle-collapse': {\n        margin: '0.25em .5em 0 .5em !important',\n      },\n      '& h4': {\n        width: '100%',\n        'text-align': 'left',\n        display: 'inline-block',\n        color: '#138AC2',\n        margin: '0.25em .5em 0 .5em',\n        'font-size': '18px',\n      },\n      '& .d-flex': {\n        'border-bottom': '1px solid gray',\n      },\n      '& .label': {\n        float: 'left',\n      },\n      '& .arrows': {\n        'text-align': 'right',\n        float: 'right',\n        '& .fa-trash': {\n          border: '1px solid #DE5354',\n          color: '#DE5354',\n        },\n        '& .fa': {\n          'border-radius': '4px',\n          padding: '.25em',\n          margin: '0 .5em 0 0',\n        },\n      },\n    },\n    '& .card-dependent': {\n      border: '1px dashed gray',\n    },\n    '& .card-requirements': {\n      border: '1px dashed black',\n    },\n    '& .section-container': {\n      '&:hover': {\n        border: '1px solid green',\n      },\n      display: 'block',\n      width: '90%',\n      'min-width': '400px',\n      margin: '2em auto',\n      border: '1px solid var(--gray)',\n      'border-radius': '4px',\n      'background-color': 'white',\n      '& .toggle-collapse': {\n        margin: '0.25em .5em 0 .5em !important',\n      },\n      '& h4': {\n        width: '100%',\n        'text-align': 'left',\n        display: 'inline-block',\n        color: '#138AC2',\n        margin: '0.25em .5em 0 .5em',\n        'font-size': '18px',\n      },\n      '& .d-flex': {\n        'border-bottom': '1px solid var(--gray)',\n      },\n      '& .label': {\n        float: 'left',\n      },\n      '& .arrows': {\n        'text-align': 'right',\n        float: 'right',\n        '& .fa-trash': {\n          border: '1px solid #DE5354',\n          color: '#DE5354',\n        },\n        '& .fa': {\n          'border-radius': '4px',\n          padding: '.25em',\n          margin: '0 .5em 0 0',\n        },\n      },\n    },\n    '& .section-dependent': {\n      border: '1px dashed gray',\n    },\n    '& .section-requirements': {\n      border: '1px dashed black',\n    },\n    '& .alert': {\n      textAlign: 'left',\n      width: '70%',\n      margin: '1em auto',\n      '& h5': {\n        color: 'black',\n        fontSize: '16px',\n        fontWeight: 'bold',\n        margin: '0',\n      },\n      '& li': { fontSize: '14px' },\n    },\n    '& .disabled-unchecked-checkbox': {\n      color: 'var(--gray)',\n      '& div::before': { backgroundColor: 'var(--light-gray)' },\n    },\n    '& .disabled-input': {\n      '& input': { backgroundColor: 'var(--light-gray)' },\n      '& input:focus': {\n        backgroundColor: 'var(--light-gray)',\n        border: '1px solid var(--gray)',\n      },\n    },\n  },\n  formHead: {\n    display: 'block',\n    margin: '0 auto',\n    'background-color': '#EBEBEB',\n    border: '1px solid #858F96',\n    'border-radius': '4px',\n    width: '70%',\n    padding: '10px',\n    '& div': {\n      width: '30%',\n      display: 'inline-block',\n      'text-align': 'left',\n      padding: '10px',\n    },\n    '& .form-title': {\n      'text-align': 'left',\n    },\n    '& .form-description': {\n      'text-align': 'left',\n    },\n    '& h5': {\n      'font-size': '14px',\n      'line-height': '21px',\n      'font-weight': 'bold',\n    },\n  },\n  formBody: {\n    display: 'flex',\n    flexDirection: 'column',\n    '& .fa-pencil, & .fa-arrow-up, & .fa-arrow-down': {\n      border: '1px solid #1d71ad',\n      color: '#1d71ad',\n    },\n    '& .modal-body': {\n      maxHeight: '500px',\n      overflowY: 'scroll',\n    },\n    '& .card-container': {\n      width: '70%',\n      minWidth: '400px',\n      margin: '2em auto',\n      border: '1px solid var(--gray)',\n      borderRadius: '4px',\n      backgroundColor: 'white',\n      '& .toggle-collapse': { margin: '0.25em 0.5em 0 0.5em !important' },\n      '& h4': {\n        width: '100%',\n        textAlign: ['left', 'left'],\n        display: 'inline-block',\n        color: '#138ac2',\n        margin: '0.25em 0.5em 0 0.5em',\n        fontSize: '18px',\n      },\n      '& .d-flex': { borderBottom: '1px solid var(--gray)' },\n      '& .label': { cssFloat: 'left' },\n      '& .arrows': {\n        textAlign: 'right',\n        cssFloat: 'right',\n        '& .fa-trash': { border: '1px solid #de5354', color: '#de5354' },\n        '& .fa': {\n          borderRadius: '4px',\n          padding: '0.25em',\n          margin: '0 0.5em 0 0',\n        },\n      },\n    },\n    '& .card-container:hover': { border: '1px solid var(--green)' },\n    '& .card-dependent': { border: '1px dashed var(--gray)' },\n    '& .card-add': {\n      cursor: 'pointer',\n      display: 'block',\n      color: '$green',\n      fontSize: '1.5em',\n    },\n    '& .section-container': {\n      width: '90%',\n      minWidth: '400px',\n      margin: '2em auto',\n      border: '1px solid var(--gray)',\n      borderRadius: '4px',\n      '& .toggle-collapse': { margin: '0.25em 0.5em 0 0.5em !important' },\n      '& h4': {\n        width: '100%',\n        textAlign: ['left', 'left'],\n        display: 'inline-block',\n        color: '#138ac2',\n        margin: '0.25em 0.5em 0 0.5em',\n        fontSize: '18px',\n      },\n      '& .d-flex': { borderBottom: '1px solid var(--gray)' },\n      '& .label': { cssFloat: 'left' },\n      '& .arrows': {\n        textAlign: 'right',\n        cssFloat: 'right',\n        '& .fa-trash': { border: '1px solid #de5354', color: '#de5354' },\n        '& .fa': {\n          borderRadius: '4px',\n          padding: '0.25em',\n          margin: '0 0.5em 0 0',\n        },\n      },\n    },\n    '& .section-container:hover': { border: '1px solid var(--green)' },\n    '& .section-dependent': { border: '1px dashed var(--gray)' },\n    '& .section-requirements': { border: '1px dashed black' },\n  },\n  formFooter: {\n    marginTop: '1em',\n    textAlign: 'center',\n    '& i': { cursor: 'pointer', color: '$green', fontSize: '1.5em' },\n  },\n});\n\nexport default function FormBuilder({\n  schema,\n  uischema,\n  onChange,\n  mods,\n  className,\n}: {\n  schema: string,\n  uischema: string,\n  onChange: (string, string) => any,\n  mods?: Mods,\n  className?: string,\n}) {\n  const classes = useStyles();\n  const schemaData = (parse(schema): { [string]: any }) || {};\n  schemaData.type = 'object';\n  const uiSchemaData = (parse(uischema): { [string]: any }) || {};\n  const allFormInputs = {\n    ...DEFAULT_FORM_INPUTS,\n    ...(mods && mods.customFormInputs),\n  };\n  const unsupportedFeatures = checkForUnsupportedFeatures(\n    schemaData,\n    uiSchemaData,\n    allFormInputs,\n  );\n\n  const elementNum = countElementsFromSchema(schemaData);\n  const defaultCollapseStates = [...Array(elementNum)].map(() => false);\n  const [cardOpenArray, setCardOpenArray] = React.useState(\n    defaultCollapseStates,\n  );\n  const categoryHash = generateCategoryHash(allFormInputs);\n\n  return (\n    <div className={`${classes.formBuilder} ${className || ''}`}>\n      <Alert\n        style={{\n          display: unsupportedFeatures.length === 0 ? 'none' : 'block',\n        }}\n        color='warning'\n      >\n        <h5>Unsupported Features:</h5>\n        {unsupportedFeatures.map((message, index) => (\n          <li key={index}>{message}</li>\n        ))}\n      </Alert>\n      <div className={classes.formHead}>\n        <div>\n          <h5>Form Name</h5>\n          <Input\n            value={schemaData.title || ''}\n            placeholder='Title'\n            type='text'\n            onChange={(ev: SyntheticInputEvent<HTMLInputElement>) => {\n              onChange(\n                stringify({\n                  ...schemaData,\n                  title: ev.target.value,\n                }),\n                uischema,\n              );\n            }}\n            className='form-title'\n          />\n        </div>\n        <div>\n          <h5>Form Description</h5>\n          <Input\n            value={schemaData.description || ''}\n            placeholder='Description'\n            type='text'\n            onChange={(ev: SyntheticInputEvent<HTMLInputElement>) =>\n              onChange(\n                stringify({\n                  ...schemaData,\n                  description: ev.target.value,\n                }),\n                uischema,\n              )\n            }\n            className='form-description'\n          />\n        </div>\n      </div>\n      <div className={`form-body ${classes.formBody}`}>\n        <DragDropContext\n          onDragEnd={(result) =>\n            onDragEnd(result, {\n              schema: schemaData,\n              uischema: uiSchemaData,\n              onChange: (newSchema, newUiSchema) =>\n                onChange(stringify(newSchema), stringify(newUiSchema)),\n              definitionData: schemaData.definitions,\n              definitionUi: uiSchemaData.definitions,\n              categoryHash,\n            })\n          }\n          className='form-body'\n        >\n          <Droppable droppableId='droppable'>\n            {(providedDroppable) => (\n              <div\n                ref={providedDroppable.innerRef}\n                {...providedDroppable.droppableProps}\n              >\n                {generateElementComponentsFromSchemas({\n                  schemaData,\n                  uiSchemaData,\n                  onChange: (newSchema, newUiSchema) =>\n                    onChange(stringify(newSchema), stringify(newUiSchema)),\n                  definitionData: schemaData.definitions,\n                  definitionUi: uiSchemaData.definitions,\n                  path: 'root',\n                  cardOpenArray,\n                  setCardOpenArray,\n                  allFormInputs,\n                  mods,\n                  categoryHash,\n                  Card,\n                  Section,\n                }).map((element: any, index) => (\n                  <Draggable\n                    key={element.key}\n                    draggableId={element.key}\n                    index={index}\n                  >\n                    {(providedDraggable) => (\n                      <div\n                        ref={providedDraggable.innerRef}\n                        {...providedDraggable.draggableProps}\n                        {...providedDraggable.dragHandleProps}\n                      >\n                        {element}\n                      </div>\n                    )}\n                  </Draggable>\n                ))}\n                {providedDroppable.placeholder}\n              </div>\n            )}\n          </Droppable>\n        </DragDropContext>\n      </div>\n      <div className={`form-footer ${classes.formFooter}`}>\n        <Add\n          name='form-builder'\n          addElem={(choice: string) => {\n            if (choice === 'card') {\n              addCardObj({\n                schema: schemaData,\n                uischema: uiSchemaData,\n                onChange: (newSchema, newUiSchema) =>\n                  onChange(stringify(newSchema), stringify(newUiSchema)),\n                definitionData: schemaData.definitions,\n                definitionUi: uiSchemaData.definitions,\n                categoryHash,\n              });\n            } else if (choice === 'section') {\n              addSectionObj({\n                schema: schemaData,\n                uischema: uiSchemaData,\n                onChange: (newSchema, newUiSchema) =>\n                  onChange(stringify(newSchema), stringify(newUiSchema)),\n                definitionData: schemaData.definitions,\n                definitionUi: uiSchemaData.definitions,\n                categoryHash,\n              });\n            }\n          }}\n          hidden={\n            schemaData.properties &&\n            Object.keys(schemaData.properties).length !== 0\n          }\n        />\n      </div>\n    </div>\n  );\n}\n","// @flow\n\nimport React from 'react';\nimport {\n  generateElementComponentsFromSchemas,\n  countElementsFromSchema,\n  addCardObj,\n  addSectionObj,\n} from './utils';\nimport Card from './Card';\nimport Section from './Section';\nimport Add from './Add';\nimport DEFAULT_FORM_INPUTS from './defaults/defaultFormInputs';\nimport type { Mods } from './types';\n\nexport default function CardGallery({\n  definitionSchema,\n  definitionUiSchema,\n  onChange,\n  mods,\n  categoryHash,\n}: {\n  definitionSchema: { [string]: any },\n  definitionUiSchema: { [string]: any },\n  onChange: ({ [string]: any }, { [string]: any }) => void,\n  mods?: Mods,\n  categoryHash: { [string]: string },\n}) {\n  const elementNum = countElementsFromSchema({\n    properties: definitionSchema,\n  });\n  const defaultCollapseStates = [...Array(elementNum)].map(() => false);\n  const [cardOpenArray, setCardOpenArray] = React.useState(\n    defaultCollapseStates,\n  );\n  const allFormInputs = {\n    ...DEFAULT_FORM_INPUTS,\n    ...(mods && mods.customFormInputs),\n  };\n  const componentArr = generateElementComponentsFromSchemas({\n    schemaData: { properties: definitionSchema },\n    uiSchemaData: definitionUiSchema,\n    onChange: (newDefinitions, newDefinitionUis) => {\n      const oldUi = newDefinitionUis;\n      const newUi = {};\n\n      Object.keys(oldUi).forEach((definedUi) => {\n        if (!['definitions', 'ui:order'].includes(definedUi))\n          newUi[definedUi] = oldUi[definedUi];\n      });\n      onChange(newDefinitions.properties, newUi);\n    },\n    path: 'definitions',\n    definitionData: definitionSchema,\n    definitionUi: definitionUiSchema,\n    cardOpenArray,\n    setCardOpenArray,\n    allFormInputs,\n    mods,\n    categoryHash,\n    Card,\n    Section,\n  }).map((element: any) => (\n    <div\n      key={typeof element.key === 'string' ? element.key : ''}\n      className='form_gallery_container'\n    >\n      {element}\n    </div>\n  ));\n\n  return (\n    <div className='form_gallery'>\n      {componentArr}\n      {componentArr.length === 0 && <h5>No components in \"definitions\"</h5>}\n      <div className='form_footer'>\n        <Add\n          name='form_gallery'\n          addElem={(choice: string) => {\n            if (choice === 'card') {\n              addCardObj({\n                schema: { properties: definitionSchema },\n                uischema: definitionUiSchema,\n                onChange: (newDefinitions, newDefinitionUis) => {\n                  const oldUi = newDefinitionUis;\n                  const newUi = {};\n\n                  Object.keys(oldUi).forEach((definedUiSchemaKey) => {\n                    if (\n                      !['definitions', 'ui:order'].includes(definedUiSchemaKey)\n                    )\n                      newUi[definedUiSchemaKey] = oldUi[definedUiSchemaKey];\n                  });\n                  onChange(newDefinitions.properties, newUi);\n                },\n                definitionData: definitionSchema,\n                definitionUi: definitionUiSchema,\n                categoryHash,\n              });\n            } else if (choice === 'section') {\n              addSectionObj({\n                schema: { properties: definitionSchema },\n                uischema: definitionUiSchema,\n                onChange: (newDefinitions, newDefinitionUis) => {\n                  const oldUi = newDefinitionUis;\n                  const newUi = {};\n\n                  Object.keys(oldUi).forEach((definedUiSchemaKey) => {\n                    if (\n                      !['definitions', 'ui:order'].includes(definedUiSchemaKey)\n                    )\n                      newUi[definedUiSchemaKey] = oldUi[definedUiSchemaKey];\n                  });\n                  onChange(newDefinitions.properties, newUi);\n                },\n                definitionData: definitionSchema,\n                definitionUi: definitionUiSchema,\n                categoryHash,\n              });\n            }\n          }}\n          hidden={\n            !!definitionSchema && Object.keys(definitionSchema).length !== 0\n          }\n        />\n      </div>\n    </div>\n  );\n}\n","// @flow\nimport * as React from 'react';\nimport { createUseStyles } from 'react-jss';\nimport CardGallery from './CardGallery';\nimport {\n  parse,\n  stringify,\n  propagateDefinitionChanges,\n  generateCategoryHash,\n} from './utils';\nimport DEFAULT_FORM_INPUTS from './defaults/defaultFormInputs';\nimport type { Mods } from './types';\n\nconst useStyles = createUseStyles({\n  preDefinedGallery: {\n    display: 'flex',\n    flexDirection: 'column',\n    'text-align': 'center',\n    '& i': {\n      cursor: 'pointer',\n    },\n    '& .fa-question-circle': {\n      color: 'gray',\n    },\n    '& .fa-asterisk': {\n      'font-size': '.9em',\n      color: 'green',\n    },\n    '& .form_footer': {\n      marginTop: '1em',\n      textAlign: 'center',\n      '& i': { cursor: 'pointer', color: '$green', fontSize: '1.5em' },\n    },\n    '& .fa-plus-square': {\n      color: 'green',\n      'font-size': '1.5em',\n      margin: '0 auto',\n    },\n    '& .card-container': {\n      '&:hover': {\n        border: '1px solid green',\n      },\n      width: '70%',\n      'min-width': '400px',\n      margin: '2em auto',\n      border: '1px solid gray',\n      'border-radius': '4px',\n      'background-color': 'white',\n      '& .toggle-collapse': {\n        margin: '0.25em .5em 0 .5em !important',\n      },\n      '& h4': {\n        width: '100%',\n        'text-align': 'left',\n        display: 'inline-block',\n        color: '#138AC2',\n        margin: '0.25em .5em 0 .5em',\n        'font-size': '18px',\n      },\n      '& .d-flex': {\n        'border-bottom': '1px solid gray',\n      },\n      '& .label': {\n        float: 'left',\n      },\n      '& .arrows': {\n        'text-align': 'right',\n        float: 'right',\n        '& .fa-trash': {\n          border: '1px solid #DE5354',\n          color: '#DE5354',\n        },\n        '& .fa': {\n          'border-radius': '4px',\n          padding: '.25em',\n          margin: '0 .5em 0 0',\n        },\n      },\n    },\n    '& .card-requirements': {\n      border: '1px dashed black',\n    },\n    '& .section-container': {\n      '&:hover': {\n        border: '1px solid green',\n      },\n      display: 'block',\n      width: '90%',\n      'min-width': '400px',\n      margin: '2em auto',\n      border: '1px solid var(--gray)',\n      'border-radius': '4px',\n      'background-color': 'white',\n      '& .toggle-collapse': {\n        margin: '0.25em .5em 0 .5em !important',\n      },\n      '& h4': {\n        width: '100%',\n        'text-align': 'left',\n        display: 'inline-block',\n        color: '#138AC2',\n        margin: '0.25em .5em 0 .5em',\n        'font-size': '18px',\n      },\n      '& .d-flex': {\n        'border-bottom': '1px solid var(--gray)',\n      },\n      '& .label': {\n        float: 'left',\n      },\n      '& .arrows': {\n        'text-align': 'right',\n        float: 'right',\n        '& .fa-trash': {\n          border: '1px solid #DE5354',\n          color: '#DE5354',\n        },\n        '& .fa': {\n          'border-radius': '4px',\n          padding: '.25em',\n          margin: '0 .5em 0 0',\n        },\n      },\n    },\n    '& .section-dependent': {\n      border: '1px dashed gray',\n    },\n    '& .section-requirements': {\n      border: '1px dashed black',\n    },\n    '& .fa-pencil, & .fa-arrow-up, & .fa-arrow-down': {\n      border: '1px solid #1d71ad',\n      color: '#1d71ad',\n    },\n    '& .modal-body': {\n      maxHeight: '500px',\n      overflowY: 'scroll',\n    },\n    '& .card-container:hover': { border: '1px solid var(--green)' },\n    '& .card-dependent': { border: '1px dashed var(--gray)' },\n    '& .card-add': {\n      cursor: 'pointer',\n      display: 'block',\n      color: '$green',\n      fontSize: '1.5em',\n    },\n\n    '& .section-container:hover': { border: '1px solid var(--green)' },\n  },\n});\n\nexport default function PredefinedGallery({\n  schema,\n  uischema,\n  onChange,\n  mods,\n}: {\n  schema: string,\n  uischema: string,\n  onChange: (string, string) => any,\n  mods?: Mods,\n}) {\n  const classes = useStyles();\n  const schemaData = (parse(schema): { [string]: any }) || {};\n  const uiSchemaData = (parse(uischema): { [string]: any }) || {};\n  const allFormInputs = {\n    ...DEFAULT_FORM_INPUTS,\n    ...(mods && mods.customFormInputs),\n  };\n  const categoryHash = generateCategoryHash(allFormInputs);\n\n  React.useEffect(() => {\n    if (!uiSchemaData.definitions) {\n      // eslint-disable-next-line no-console\n      console.log('Parsing UI schema to assign UI for definitions');\n      // need to create definitions from scratch\n      const references = [];\n      // recursively search for all $refs in the schemaData\n      const findRefs = (name, schemaObject) => {\n        if (!schemaObject) return;\n        if (typeof schemaObject === 'object')\n          Object.keys(schemaObject).forEach((key) => {\n            if (typeof key === 'string') {\n              if (key === '$ref') references.push(name);\n              findRefs(key, schemaObject[key]);\n            }\n          });\n        if (Array.isArray(schemaObject))\n          schemaObject.forEach((innerObj) => {\n            findRefs(name, innerObj);\n          });\n      };\n\n      findRefs('root', schemaData);\n\n      uiSchemaData.definitions = {};\n      const referenceSet = new Set(references);\n      Object.keys(uiSchemaData).forEach((uiProp) => {\n        if (referenceSet.has(uiProp))\n          uiSchemaData.definitions[uiProp] = uiSchemaData[uiProp];\n      });\n      if (!Object.keys(uiSchemaData.definitions).length) {\n        uiSchemaData.definitions = undefined;\n      }\n      onChange(stringify(schemaData), stringify(uiSchemaData));\n    }\n  }, [uischema, schema]);\n  return (\n    <div className={classes.preDefinedGallery}>\n      <CardGallery\n        definitionSchema={schemaData.definitions}\n        definitionUiSchema={uiSchemaData.definitions}\n        onChange={(\n          newDefinitions: { [string]: any },\n          newDefinitionsUi: { [string]: any },\n        ) => {\n          schemaData.definitions = newDefinitions;\n          uiSchemaData.definitions = newDefinitionsUi;\n          // propagate changes in ui definitions to all relavant parties in main schema\n\n          propagateDefinitionChanges(\n            schemaData,\n            uiSchemaData,\n            (newSchema, newUiSchema) =>\n              onChange(stringify(newSchema), stringify(newUiSchema)),\n            categoryHash,\n          );\n        }}\n        mods={mods}\n        categoryHash={categoryHash}\n      />\n    </div>\n  );\n}\n","// @flow\n\nimport * as React from 'react';\n\nimport classnames from 'classnames';\nimport { TabContent, TabPane, Nav, NavItem, NavLink } from 'reactstrap';\nimport { createUseStyles } from 'react-jss';\n\ntype TabSpec = {\n  name: string,\n  content: React.Element<any>,\n  id?: string,\n};\n\nconst useStyles = createUseStyles({\n  portalTabs: {\n    '& .tab-content': {\n      '& .tab-pane > .tab-pane': {\n        display: 'none',\n        padding: '2em',\n      },\n      '& .active > .tab-pane': {\n        display: 'block',\n      },\n    },\n    '& .nav': {\n      '& .nav-link': {\n        position: 'relative',\n        display: 'inline-flex',\n        padding: '10px',\n      },\n      '& li': {\n        display: 'inline-block',\n      },\n      '& .nav-item': {\n        '& .active': {\n          color: '#212529 !important',\n          'font-weight': 600,\n        },\n        '&:hover': {\n          cursor: 'pointer',\n        },\n        '& a': {\n          color: '#ccc',\n        },\n      },\n    },\n  },\n});\n\ntype Props = {\n  defaultActiveTab?: number,\n  tabs: TabSpec[],\n  withSeparator?: boolean,\n  preventRerender?: boolean,\n};\n\nexport default function Tabs({\n  defaultActiveTab = 0,\n  tabs = [],\n  withSeparator = false,\n  preventRerender = false,\n}: Props) {\n  const classes = useStyles();\n  const [activeTab, setActiveTab] = React.useState(defaultActiveTab);\n\n  return (\n    <div className={classes.portalTabs}>\n      <Nav tabs>\n        {tabs.map(({ name, id }, i) => (\n          <NavItem key={i} id={id}>\n            <NavLink\n              className={classnames({ active: activeTab === i })}\n              onClick={() => {\n                setActiveTab(i);\n              }}\n            >\n              {name}\n            </NavLink>\n          </NavItem>\n        ))}\n      </Nav>\n      <TabContent\n        activeTab={activeTab}\n        className={classnames({\n          'with-separator': withSeparator,\n        })}\n      >\n        <React.Fragment>\n          {tabs.map(({ content }, i) => (\n            <TabPane key={i} tabId={i}>\n              {activeTab === i && (preventRerender ? true : content)}\n              {preventRerender ? content : ''}\n            </TabPane>\n          ))}\n        </React.Fragment>\n      </TabContent>\n    </div>\n  );\n}\n","// @flow\n\nimport React from 'react';\n\ntype Props = {\n  children: any,\n  onErr?: (string) => any,\n  errMessage?: string,\n};\n\ntype State = {\n  hasError: boolean,\n  error: string,\n};\n\n/* \nContainer for potentially error generating components\nTriggers the optional onErr function with error message as string\nProvides the option to attempt rendering the children again\n*/\nclass ErrorBoundary extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = { hasError: false, error: '' };\n  }\n\n  componentDidCatch(error: any) {\n    this.setState({ hasError: true });\n    const errorMessage = error.toString();\n    this.setState({\n      error: errorMessage,\n    });\n    if (this.props.onErr) this.props.onErr(errorMessage);\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return (\n        <div>\n          <p>\n            {this.props.errMessage ? this.props.errMessage : this.state.error}\n          </p>\n          <button\n            onClick={() => {\n              this.setState({ hasError: false, error: '' });\n              if (this.props.onErr) this.props.onErr('');\n            }}\n          >\n            Try Again\n          </button>\n        </div>\n      );\n    } else {\n      return this.props.children;\n    }\n  }\n}\n\nexport default ErrorBoundary;\n","// @flow\nimport React from 'react';\nimport {\n  Alert,\n  Modal,\n  ModalHeader,\n  Button,\n  ModalBody,\n  ModalFooter,\n} from 'reactstrap';\nimport Form from '@rjsf/core';\nimport { FormBuilder, PredefinedGallery } from '@ginkgo-bioworks/react-json-schema-form-builder';\nimport Tabs from './tabs/Tabs';\nimport JSONInput from 'react-json-editor-ajrm';\nimport locale from 'react-json-editor-ajrm/locale/en';\nimport ErrorBoundary from './ErrorBoundary';\n\ntype Props = {\n  lang: string,\n  schema: string,\n  uischema: string,\n  onChange?: (schema: string, uischema: string) => void,\n  schemaTitle?: string,\n  uischemaTitle?: string,\n  width?: string,\n  height?: string,\n};\n\ntype State = {\n  formData: any,\n  formToggle: boolean,\n  outputToggle: boolean,\n  schemaFormErrorFlag: string,\n  validFormInput: boolean,\n  submissionData: any,\n};\n\n// return error message for parsing or blank if no error\nfunction checkError(text: string, language: string) {\n  let data;\n  try {\n    data = JSON.parse(text);\n  } catch (e) {\n    return e.toString();\n  }\n  if (typeof data === 'string') {\n    return 'Received a string instead of object.';\n  }\n  return '';\n}\n\nclass JsonSchemaFormEditor extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n\n    // assign initial values\n    this.state = {\n      formData: {},\n      formToggle: true,\n      outputToggle: false,\n      schemaFormErrorFlag: '',\n      validFormInput: false,\n      editorWidth: 700,\n      submissionData: {},\n    };\n  }\n\n  // update state schema and indicate parsing errors\n  updateSchema(text: string) {\n    // update parent\n    if (this.props.onChange) this.props.onChange(text, this.props.uischema);\n  }\n\n  // update state ui schema and indicate parsing errors\n  updateUISchema(text: string) {\n    // update parent\n    if (this.props.onChange) this.props.onChange(this.props.schema, text);\n  }\n\n  // update the internal form data state\n  updateFormData(text: string) {\n    try {\n      const data = JSON.parse(text);\n      this.setState({\n        formData: data,\n        schemaFormErrorFlag: '',\n      });\n    } catch (err) {\n      this.setState({\n        schemaFormErrorFlag: err.toString(),\n      });\n    }\n  }\n\n  render() {\n    const schemaError = checkError(this.props.schema, this.props.lang);\n    const schemaUiError = checkError(this.props.uischema, this.props.lang);\n    return (\n      <div\n        style={{\n          width: this.props.width ? this.props.width : '100%',\n          height: this.props.height ? this.props.height : '500px',\n        }}\n        className='playground-main'\n      >\n        <Alert\n          style={{\n            display: schemaError === '' ? 'none' : 'block',\n          }}\n          color='danger'\n        >\n          <h5>Schema:</h5> {schemaError}\n        </Alert>\n        <Alert\n          style={{\n            display: schemaUiError === '' ? 'none' : 'block',\n          }}\n          color='danger'\n        >\n          <h5>UI Schema:</h5> {schemaUiError}\n        </Alert>\n        <Alert\n          style={{\n            display: this.state.schemaFormErrorFlag === '' ? 'none' : 'block',\n          }}\n          color='danger'\n        >\n          <h5>Form:</h5> {this.state.schemaFormErrorFlag}\n        </Alert>\n        <Tabs\n          tabs={[\n            {\n              name: 'Visual Form Builder',\n              id: 'form-builder',\n              content: (\n                <div\n                  className='tab-pane'\n                  style={{\n                    height: this.props.height ? this.props.height : '500px',\n                  }}\n                >\n                  <ErrorBoundary onErr={() => {}}>\n                    <FormBuilder\n                      schema={this.props.schema}\n                      uischema={this.props.uischema}\n                      onChange={(newSchema: string, newUiSchema: string) => {\n                        if (this.props.onChange)\n                          this.props.onChange(newSchema, newUiSchema);\n                      }}\n                    />\n                  </ErrorBoundary>\n                </div>\n              ),\n            },\n            {\n              name: 'Preview Form',\n              id: 'preview-form',\n              content: (\n                <div\n                  className='tab-pane'\n                  style={{\n                    height: this.props.height ? this.props.height : '500px',\n                  }}\n                >\n                  <ErrorBoundary\n                    onErr={(err: string) => {\n                      this.setState({\n                        schemaFormErrorFlag: err,\n                      });\n                    }}\n                    errMessage='Error parsing JSON Schema'\n                  >\n                    <Form\n                      schema={\n                        schemaError === '' ? JSON.parse(this.props.schema) : {}\n                      }\n                      uiSchema={\n                        schemaUiError === ''\n                          ? JSON.parse(this.props.uischema)\n                          : {}\n                      }\n                      onChange={(formData) =>\n                        this.updateFormData(JSON.stringify(formData.formData))\n                      }\n                      formData={this.state.formData}\n                      submitButtonMessage={'Submit'}\n                      onSubmit={(submissionData) => {\n                        // below only runs if validation succeeded\n                        this.setState({\n                          validFormInput: true,\n                          outputToggle: true,\n                          submissionData,\n                        });\n                      }}\n                    />\n                  </ErrorBoundary>\n                  <Modal isOpen={this.state.outputToggle}>\n                    <ModalHeader>Form output preview</ModalHeader>\n                    <ModalBody>\n                      <div className='editor-container'>\n                        <ErrorBoundary\n                          onErr={() => {}}\n                          errMessage={'Error parsing JSON Schema Form output'}\n                        >\n                          <h4>Output Data</h4>\n                          <JSONInput\n                            id='a_unique_id'\n                            placeholder={this.state.submissionData}\n                            locale={locale}\n                            height='550px'\n                          />\n                        </ErrorBoundary>\n                        <br />\n                      </div>\n                    </ModalBody>\n                    <ModalFooter>\n                      <Button\n                        onClick={() => {\n                          this.setState({\n                            outputToggle: false,\n                          });\n                        }}\n                        color='secondary'\n                      >\n                        Close\n                      </Button>\n                    </ModalFooter>\n                  </Modal>\n                </div>\n              ),\n            },\n            {\n              name: 'Edit Schema',\n              id: 'editors',\n              content: (\n                <div\n                  className='tab-pane'\n                  style={{\n                    height: this.props.height ? this.props.height : '500px',\n                    display: 'flex',\n                    flexDirection: 'row',\n                  }}\n                >\n                  <div\n                    style={{ margin: '1em', width: '50em' }}\n                    className='editor-container'\n                  >\n                    <ErrorBoundary\n                      onErr={(err: string) => {\n                        // if rendering initial value causes a crash\n                        // eslint-disable-next-line no-console\n                        console.error(err);\n                        this.updateSchema('{}');\n                      }}\n                      errMessage={'Error parsing JSON Schema input'}\n                    >\n                      <h4>Data Schema</h4>\n                      <JSONInput\n                        id='data_schema'\n                        placeholder={\n                          this.props.schema ? JSON.parse(this.props.schema) : {}\n                        }\n                        locale={locale}\n                        height='550px'\n                        onChange={(data: any) =>\n                          this.updateSchema(JSON.stringify(data))\n                        }\n                      />\n                    </ErrorBoundary>\n                    <br />\n                  </div>\n                  <div\n                    style={{ margin: '1em', width: '50em' }}\n                    className='editor-container'\n                  >\n                    <ErrorBoundary\n                      onErr={(err: string) => {\n                        // if rendering initial value causes a crash\n                        // eslint-disable-next-line no-console\n                        console.error(err);\n                        this.updateUISchema('{}');\n                      }}\n                      errMessage={'Error parsing JSON UI Schema input'}\n                    >\n                      <h4>UI Schema</h4>\n                      <JSONInput\n                        id='ui_schema'\n                        placeholder={\n                          this.props.uischema\n                            ? JSON.parse(this.props.uischema)\n                            : {}\n                        }\n                        locale={locale}\n                        height='550px'\n                        onChange={(data: any) =>\n                          this.updateUISchema(JSON.stringify(data))\n                        }\n                      />\n                    </ErrorBoundary>\n                  </div>\n                </div>\n              ),\n            },\n            {\n              name: 'Pre-Configured Components',\n              id: 'pre-configured',\n              content: (\n                <div\n                  className='tab-pane'\n                  style={{\n                    height: this.props.height ? this.props.height : '500px',\n                  }}\n                >\n                  <ErrorBoundary onErr={() => {}}>\n                    <PredefinedGallery\n                      schema={this.props.schema}\n                      uischema={this.props.uischema}\n                      onChange={(newSchema: string, newUiSchema: string) => {\n                        if (this.props.onChange)\n                          this.props.onChange(newSchema, newUiSchema);\n                      }}\n                    />\n                  </ErrorBoundary>\n                </div>\n              ),\n            },\n          ]}\n        />\n      </div>\n    );\n  }\n}\n\nexport default JsonSchemaFormEditor;\n","// @flow\n\nimport React from 'react';\n\nimport JsonSchemaFormEditor from './JsonSchemaFormEditor';\nimport { createUseStyles } from 'react-jss';\n\nconst useStyles = createUseStyles({\n  header: {\n    '& h1': {\n      textAlign: 'center',\n      margin: '1em',\n    },\n    '& p': {\n      marginRight: '5em',\n      marginLeft: '5em',\n    },\n  },\n});\n\nexport default function PlaygroundContainer({ title }: { title: string }) {\n  const [schema, setSchema] = React.useState('{}');\n  const [uischema, setUischema] = React.useState('{}');\n  const classes = useStyles();\n  return (\n    <div className='service-playground'>\n      <div className={classes.header}>\n        <h1>{title}</h1>\n        <p>\n          Demo app for the{' '}\n          <a href='https://github.com/ginkgobioworks/react-json-schema-form-builder'>\n            React JSON Schema Form Builder\n          </a>\n          , which allows a user to visually build a form and obtain the JSON\n          Schema corresponding to it\n        </p>\n        <p>\n          The Visual Form Builder tab corresponds to the actual Form Builder\n          component. This reads in code from the JSON Schema, which is stored\n          and updated live in the \"Edit Schema\" tab, and renders the code as\n          manipulatable form elements. The result of the form is rendered with\n          the material design theme in the Preview Form tab. The Pre-Configured\n          Components tab also demonstrates how the form builder takes advantage\n          of the definitions property of JSON Schema to render definitions.\n        </p>\n      </div>\n      <JsonSchemaFormEditor\n        lang={'json'}\n        schema={schema}\n        uischema={uischema}\n        schemaTitle='Data Schema'\n        uischemaTitle='UI Schema'\n        onChange={(newSchema: string, newUiSchema: string) => {\n          setSchema(newSchema);\n          setUischema(newUiSchema);\n        }}\n        width='95%'\n        height='800px'\n      />\n    </div>\n  );\n}\n","import React from 'react';\nimport PlaygroundContainer from './PlaygroundContainer';\n\nfunction App() {\n  return (\n    <body>\n      <PlaygroundContainer title='React JSON Schema Form Builder' />\n    </body>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.Fragment>\n    <head>\n      <link\n        rel='stylesheet'\n        href='https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css'\n        integrity='sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T'\n        crossOrigin='anonymous'\n      />\n      <link\n        rel='stylesheet'\n        href='https://use.fontawesome.com/releases/v5.11.2/css/all.css'\n      />\n      <link\n        rel='stylesheet'\n        href='https://use.fontawesome.com/releases/v5.11.2/css/v4-shims.css'\n      />\n    </head>\n    <App />\n  </React.Fragment>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}